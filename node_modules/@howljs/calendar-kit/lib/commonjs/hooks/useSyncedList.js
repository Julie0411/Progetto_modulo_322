"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNativeReanimated = require("react-native-reanimated");
var _constants = require("../constants");
var _ActionsProvider = require("../context/ActionsProvider");
var _CalendarProvider = require("../context/CalendarProvider");
var _VisibleDateProvider = require("../context/VisibleDateProvider");
var _dateUtils = require("../utils/dateUtils");
const useSyncedList = ({
  id
}) => {
  const {
    scrollType,
    gridListRef,
    dayBarListRef,
    visibleDateUnix,
    offsetX,
    isTriggerMomentum,
    triggerDateChanged,
    visibleDateUnixAnim,
    visibleWeeks
  } = (0, _CalendarProvider.useCalendar)();
  const notifyDateChanged = (0, _VisibleDateProvider.useNotifyDateChanged)();
  const {
    onChange,
    onDateChanged
  } = (0, _ActionsProvider.useActions)();
  const isDragging = (0, _reactNativeReanimated.useSharedValue)(false);
  const startDateUnix = (0, _react.useRef)(0);
  const _updateScrolling = isScrolling => {
    startDateUnix.current = visibleDateUnix.current;
    scrollType.current = isScrolling ? id : _constants.ScrollType.calendarGrid;
  };
  const _updateMomentum = isTrigger => {
    isTriggerMomentum.current = isTrigger;
  };
  const _onMomentumEnd = () => {
    if (isTriggerMomentum.current && startDateUnix.current !== visibleDateUnix.current) {
      triggerDateChanged.current = undefined;
      onDateChanged === null || onDateChanged === void 0 || onDateChanged((0, _dateUtils.dateTimeToISOString)((0, _dateUtils.parseDateTime)(visibleDateUnix.current)));
      notifyDateChanged(visibleDateUnix.current);
      isTriggerMomentum.current = false;
    }
  };
  const onScroll = (0, _reactNativeReanimated.useAnimatedScrollHandler)({
    onScroll: event => {
      if (!isDragging.value) {
        return;
      }
      const x = event.contentOffset.x;
      offsetX.value = x;
      if (id === _constants.ScrollType.dayBar) {
        (0, _reactNativeReanimated.scrollTo)(gridListRef, offsetX.value, 0, false);
      } else {
        (0, _reactNativeReanimated.scrollTo)(dayBarListRef, offsetX.value, 0, false);
      }
    },
    onBeginDrag: () => {
      isDragging.value = true;
      (0, _reactNativeReanimated.runOnJS)(_updateScrolling)(true);
    },
    onMomentumBegin: () => {
      if (isDragging.value) {
        (0, _reactNativeReanimated.runOnJS)(_updateMomentum)(true);
      }
    },
    onMomentumEnd: () => {
      if (isDragging.value) {
        (0, _reactNativeReanimated.runOnJS)(_onMomentumEnd)();
      }
    }
  });
  const onVisibleColumnChanged = (0, _react.useCallback)(props => {
    const {
      index: pageIndex,
      column,
      columns,
      extraScrollData
    } = props;
    const {
      visibleColumns,
      visibleDates
    } = extraScrollData;
    if (scrollType.current === id && visibleColumns && visibleDates) {
      const dayIndex = pageIndex * columns + column;
      const visibleStart = visibleDates[pageIndex * columns];
      const visibleEnd = visibleDates[pageIndex * columns + column + visibleColumns];
      if (visibleStart && visibleEnd) {
        const diffDays = Math.floor((visibleEnd - visibleStart) / _constants.MILLISECONDS_IN_DAY);
        if (diffDays <= 7) {
          visibleWeeks.value = [visibleStart];
        } else {
          const nextWeekStart = visibleDates[pageIndex * columns + 7];
          if (nextWeekStart) {
            visibleWeeks.value = [visibleStart, nextWeekStart];
          }
        }
      }
      const currentDate = visibleDates[dayIndex];
      if (!currentDate) {
        triggerDateChanged.current = undefined;
        return;
      }
      if (visibleDateUnix.current !== currentDate) {
        const dateIsoStr = (0, _dateUtils.dateTimeToISOString)((0, _dateUtils.parseDateTime)(currentDate));
        onChange === null || onChange === void 0 || onChange(dateIsoStr);
        if (triggerDateChanged.current && triggerDateChanged.current === currentDate) {
          triggerDateChanged.current = undefined;
          onDateChanged === null || onDateChanged === void 0 || onDateChanged(dateIsoStr);
          notifyDateChanged(currentDate);
        }
        visibleDateUnix.current = currentDate;
        (0, _reactNativeReanimated.runOnUI)(() => {
          visibleDateUnixAnim.value = currentDate;
        })();
      }
    }
  }, [scrollType, id, visibleDateUnix, visibleWeeks, triggerDateChanged, onChange, onDateChanged, notifyDateChanged, visibleDateUnixAnim]);
  return {
    onScroll,
    onVisibleColumnChanged
  };
};
var _default = exports.default = useSyncedList;
//# sourceMappingURL=useSyncedList.js.map