"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = require("react-native-reanimated");
var _CalendarProvider = require("../context/CalendarProvider");
var _utils = require("../utils/utils");
const SCALE_FACTOR = 0.5;
const usePinchToZoom = () => {
  const {
    verticalListRef,
    maxTimeIntervalHeight,
    minTimeIntervalHeight,
    timeIntervalHeight,
    offsetY,
    allowPinchToZoom
  } = (0, _CalendarProvider.useCalendar)();
  const startOffsetY = (0, _reactNativeReanimated.useSharedValue)(offsetY.value);
  const pinchGestureRef = (0, _react.useRef)();
  const startScale = (0, _reactNativeReanimated.useSharedValue)(1);
  const lastScale = (0, _reactNativeReanimated.useSharedValue)(1);
  const pinchGesture = _reactNativeGestureHandler.Gesture.Pinch().onBegin(() => {
    startScale.value = lastScale.value;
    startOffsetY.value = offsetY.value;
  }).onUpdate(({
    focalY,
    scale,
    velocity
  }) => {
    if (velocity === 0) {
      startOffsetY.value = offsetY.value;
      return;
    }
    const newScale = startScale.value * scale;
    const scaledDiff = (newScale - lastScale.value) * SCALE_FACTOR;
    const newHeight = timeIntervalHeight.value * (1 + scaledDiff);
    const scaleOrigin = (focalY + startOffsetY.value) / timeIntervalHeight.value;
    const heightDiff = newHeight - timeIntervalHeight.value;
    const clampedHeight = (0, _utils.clampValues)(newHeight, minTimeIntervalHeight - 8, maxTimeIntervalHeight + 8);
    timeIntervalHeight.value = clampedHeight;
    if (clampedHeight > minTimeIntervalHeight - 8 && clampedHeight < maxTimeIntervalHeight + 8) {
      const newOffsetY = startOffsetY.value + heightDiff * scaleOrigin;
      startOffsetY.value = newOffsetY;
      (0, _reactNativeReanimated.scrollTo)(verticalListRef, 0, newOffsetY, false);
    }
    lastScale.value = newScale;
  }).onEnd(() => {
    const finalHeight = (0, _utils.clampValues)(timeIntervalHeight.value, minTimeIntervalHeight, maxTimeIntervalHeight);
    timeIntervalHeight.value = (0, _reactNativeReanimated.withSpring)(finalHeight, {
      damping: 15,
      stiffness: 100
    });
    const scaleFactor = finalHeight / timeIntervalHeight.value;
    const newOffsetY = startOffsetY.value * scaleFactor;
    (0, _reactNativeReanimated.scrollTo)(verticalListRef, 0, newOffsetY, true);
    lastScale.value = 1;
    startScale.value = 1;
  }).enabled(allowPinchToZoom).withRef(pinchGestureRef);
  return {
    pinchGesture,
    pinchGestureRef
  };
};
var _default = exports.default = usePinchToZoom;
//# sourceMappingURL=usePinchToZoom.js.map