"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = require("react-native-reanimated");
var _CalendarProvider = require("../context/CalendarProvider");
var _DragEventProvider = require("../context/DragEventProvider");
var _utils = require("../utils/utils");
var _reactNative = require("react-native");
const useDragToCreateGesture = ({
  mode
}) => {
  const {
    offsetY,
    minuteHeight,
    spaceFromTop,
    start,
    columnWidthAnim,
    hourWidth,
    calendarData,
    visibleDateUnixAnim,
    columns,
    verticalListRef,
    gridListRef
  } = (0, _CalendarProvider.useCalendar)();
  const {
    allowDragToCreate,
    dragStartMinutes,
    dragStartUnix,
    roundedDragStartMinutes,
    dragStep,
    dragPosition,
    roundedDragDuration,
    dragDuration,
    dragSelectedType,
    initialDragState,
    isDraggingCreateAnim,
    isDraggingAnim,
    extraMinutes,
    dragX,
    roundedDragStartUnix
  } = (0, _DragEventProvider.useDragEvent)();
  const initialStartY = (0, _reactNativeReanimated.useSharedValue)(0);
  const initialStartX = (0, _reactNativeReanimated.useSharedValue)(0);
  const computeDragValues = (initialStart, newMinutes, step) => {
    'worklet';

    let newDragSelectedType;
    let newDragStart = initialStart;
    let newRoundedDragStart = initialStart;
    let newDragDuration = step;
    let newRoundedDragDuration = step;
    if (newMinutes > initialStart + step) {
      newDragSelectedType = 'bottom';
      newDragStart = initialStart;
      newDragDuration = newMinutes - initialStart;
      newRoundedDragDuration = (0, _utils.roundMinutes)(newMinutes, step) - initialStart;
    } else if (newMinutes < initialStart) {
      newDragSelectedType = 'top';
      newDragStart = newMinutes;
      newRoundedDragStart = Math.floor(newMinutes / step) * step;
      newDragDuration = initialStart - newMinutes + step;
      newRoundedDragDuration = initialStart - newRoundedDragStart + step;
    }
    return {
      newDragSelectedType,
      newDragStart,
      newRoundedDragStart,
      newDragDuration,
      newRoundedDragDuration
    };
  };
  const updateDragStartPosition = (translationY, initialStart) => {
    'worklet';

    const initialY = (initialStart + extraMinutes.value) * minuteHeight.value;
    const newY = initialY + translationY;
    const newDragStart = Math.floor(newY / minuteHeight.value);
    const roundedDragStart = (0, _utils.roundMinutes)(newDragStart, dragStep, 'floor');
    dragStartMinutes.value = newDragStart;
    roundedDragStartMinutes.value = roundedDragStart;
  };
  const findNearestIndex = visibleUnix => {
    'worklet';

    let visibleIndex = calendarData.visibleDatesArray.indexOf(visibleUnix);
    if (visibleIndex === -1) {
      var _calendarData$visible;
      const nearestVisibleUnix = (0, _utils.findNearestNumber)(calendarData.visibleDatesArray, visibleUnix);
      const nearestVisibleIndex = (_calendarData$visible = calendarData.visibleDates[nearestVisibleUnix]) === null || _calendarData$visible === void 0 ? void 0 : _calendarData$visible.index;
      if (nearestVisibleIndex === undefined) {
        return undefined;
      }
      visibleIndex = nearestVisibleIndex;
    }
    return visibleIndex;
  };
  const updateDragPositionHorizontal = (translationX, initialDayUnix, initialXPosition) => {
    'worklet';

    const initialDayUnixIndex = findNearestIndex(initialDayUnix);
    const visibleIndex = findNearestIndex(visibleDateUnixAnim.value);
    if (visibleIndex === undefined || initialDayUnixIndex === undefined) {
      return;
    }
    const dayIndexOffset = initialDayUnixIndex - visibleIndex;
    const extraX = initialXPosition - dayIndexOffset * columnWidthAnim.value - hourWidth;
    const initialOffset = dayIndexOffset * columnWidthAnim.value;
    const newX = initialOffset + translationX + extraX;
    const newDragDayIndex = Math.floor(newX / columnWidthAnim.value);
    const clampedDragDayIndex = (0, _utils.clampValues)(newDragDayIndex, 0, columns - 1);
    const nextDayIndex = visibleIndex + clampedDragDayIndex;
    const targetDayUnix = calendarData.visibleDatesArray[nextDayIndex];
    if (!targetDayUnix) {
      return;
    }
    dragStartUnix.value = targetDayUnix;
    roundedDragStartUnix.value = targetDayUnix;
  };
  const gesture = _reactNativeGestureHandler.Gesture.Pan().blocksExternalGesture(verticalListRef, gridListRef).enabled(allowDragToCreate).manualActivation(true).onBegin(event => {
    initialStartX.value = event.x;
    initialStartY.value = event.translationY;
  }).onStart(() => {
    initialDragState.value = {
      dragStart: dragStartMinutes.value,
      dragStartUnix: dragStartUnix.value,
      dragDuration: dragDuration.value
    };
  }).onUpdate(({
    translationX,
    translationY,
    x,
    y
  }) => {
    dragPosition.value = {
      x,
      y,
      translationX,
      translationY
    };
    dragX.value = x;
    const initialStart = initialDragState.value.dragStart;
    if (mode === 'duration') {
      const newMinutes = Math.floor((offsetY.value + y - spaceFromTop) / minuteHeight.value) + start;
      const {
        newDragSelectedType,
        newDragStart,
        newRoundedDragStart,
        newDragDuration,
        newRoundedDragDuration
      } = computeDragValues(initialStart, newMinutes, dragStep);
      dragSelectedType.value = newDragSelectedType;
      dragStartMinutes.value = newDragStart;
      roundedDragStartMinutes.value = newRoundedDragStart;
      dragDuration.value = newDragDuration;
      roundedDragDuration.value = newRoundedDragDuration;
    } else {
      updateDragStartPosition(translationY, initialStart);
      updateDragPositionHorizontal(translationX, initialDragState.value.dragStartUnix, initialStartX.value);
    }
  }).onEnd(() => {
    dragStartMinutes.value = (0, _reactNativeReanimated.withTiming)(roundedDragStartMinutes.value, {
      duration: 150
    });
    dragDuration.value = (0, _reactNativeReanimated.withTiming)(roundedDragDuration.value, {
      duration: 150
    });
  }).onTouchesMove((_event, state) => {
    if (isDraggingCreateAnim.value && isDraggingAnim.value) {
      state.activate();
    } else if (_reactNative.Platform.OS === 'ios') {
      state.fail();
    }
  }).onTouchesUp(() => {
    if (isDraggingCreateAnim.value && isDraggingAnim.value) {
      isDraggingCreateAnim.value = false;
      isDraggingAnim.value = false;
      dragPosition.value = {
        x: -1,
        y: -1,
        translationX: -1,
        translationY: -1
      };
    }
  });
  return gesture;
};
var _default = exports.default = useDragToCreateGesture;
//# sourceMappingURL=useDragToCreateGesture.js.map