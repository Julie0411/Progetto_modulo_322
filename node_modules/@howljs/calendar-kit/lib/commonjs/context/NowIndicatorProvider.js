"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNowIndicator = exports.default = void 0;
var _luxon = require("luxon");
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = require("react-native-reanimated");
var _constants = require("../constants");
var _useLazyRef = _interopRequireDefault(require("../hooks/useLazyRef"));
var _dateUtils = require("../utils/dateUtils");
var _TimeZoneProvider = require("./TimeZoneProvider");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const NowIndicatorContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const getCurrentDatetime = timeZone => {
  const now = (0, _dateUtils.forceUpdateZone)(_luxon.DateTime.now().setZone(timeZone));
  const dateInMs = now.startOf('day').toMillis();
  return {
    date: dateInMs,
    time: now.hour * 60 + now.minute
  };
};
const NowIndicatorProvider = ({
  children
}) => {
  const {
    timeZone
  } = (0, _TimeZoneProvider.useTimezone)();
  const nowRef = (0, _useLazyRef.default)(() => getCurrentDatetime(timeZone));
  const [currentDateUnix, setCurrentDateUnix] = (0, _react.useState)(nowRef.current.date);
  const currentTime = (0, _reactNativeReanimated.useSharedValue)(nowRef.current.time);
  const timerRef = (0, _react.useRef)();
  const appState = (0, _react.useRef)(_reactNative.AppState.currentState);
  const appStateListener = (0, _react.useRef)();
  const stopTimer = (0, _react.useCallback)(() => {
    if (timerRef.current) {
      clearTimeout(timerRef.current);
      timerRef.current = undefined;
    }
  }, []);
  const updateTime = (0, _react.useCallback)(() => {
    stopTimer();
    const current = getCurrentDatetime(timeZone);
    setCurrentDateUnix(prev => {
      const diffMsSeconds = current.date - prev;
      const isSameDay = diffMsSeconds >= 0 && diffMsSeconds < _constants.MILLISECONDS_IN_DAY;
      if (isSameDay) {
        return prev;
      }
      return current.date;
    });
    currentTime.value = (0, _reactNativeReanimated.withTiming)(current.time);
    const nextSeconds = 60 - _luxon.DateTime.now().second;
    timerRef.current = setTimeout(updateTime, nextSeconds * 1000);
  }, [currentTime, stopTimer, timeZone]);
  const handleAppStateChange = (0, _react.useCallback)(nextAppState => {
    if (appState.current.match(/inactive|background/) && nextAppState === 'active') {
      updateTime();
    } else {
      stopTimer();
    }
    appState.current = nextAppState;
  }, [stopTimer, updateTime]);
  (0, _react.useEffect)(() => {
    updateTime();
    appStateListener.current = _reactNative.AppState.addEventListener('change', handleAppStateChange);
    return () => {
      var _appStateListener$cur;
      stopTimer();
      (_appStateListener$cur = appStateListener.current) === null || _appStateListener$cur === void 0 || _appStateListener$cur.remove();
    };
  }, [handleAppStateChange, stopTimer, updateTime]);
  const value = (0, _react.useMemo)(() => ({
    currentTime,
    currentDateUnix
  }), [currentDateUnix, currentTime]);
  return /*#__PURE__*/_react.default.createElement(NowIndicatorContext.Provider, {
    value: value
  }, children);
};
var _default = exports.default = NowIndicatorProvider;
const useNowIndicator = () => {
  const value = (0, _react.useContext)(NowIndicatorContext);
  if (!value) {
    throw new Error('useNowIndicator must be called from within NowIndicatorContext!');
  }
  return value;
};
exports.useNowIndicator = useNowIndicator;
//# sourceMappingURL=NowIndicatorProvider.js.map