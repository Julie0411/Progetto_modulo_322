"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLocale = exports.default = void 0;
var _lodash = _interopRequireDefault(require("lodash.merge"));
var _react = _interopRequireWildcard(require("react"));
var _constants = require("../constants");
var _useLazyRef = _interopRequireDefault(require("../hooks/useLazyRef"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const LocaleContext = /*#__PURE__*/_react.default.createContext(undefined);
const LocaleProvider = ({
  initialLocales,
  locale = 'en',
  children
}) => {
  const locales = (0, _useLazyRef.default)(() => (0, _lodash.default)({}, _constants.DEFAULT_LOCALES, initialLocales));
  const localeConfig = (0, _react.useMemo)(() => locales.current[locale] || locales.current.en, [locale, locales]);
  return /*#__PURE__*/_react.default.createElement(LocaleContext.Provider, {
    value: localeConfig
  }, children);
};
var _default = exports.default = LocaleProvider;
const useLocale = () => {
  const locale = _react.default.useContext(LocaleContext);
  if (!locale) {
    throw new Error('useLocale must be used within a LocaleProvider');
  }
  return locale;
};
exports.useLocale = useLocale;
//# sourceMappingURL=LocaleProvider.js.map