"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLayout = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _constants = require("../constants");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const LayoutContext = /*#__PURE__*/(0, _react.createContext)(_constants.DEFAULT_SIZE);
const LayoutProvider = ({
  children
}) => {
  const [layout, setLayout] = (0, _react.useState)(_constants.DEFAULT_SIZE);
  const timerRef = (0, _react.useRef)();
  const onLayout = (0, _react.useCallback)(event => {
    if (timerRef.current) {
      clearTimeout(timerRef.current);
    }
    const {
      width,
      height
    } = event.nativeEvent.layout;
    timerRef.current = setTimeout(() => {
      setLayout({
        width,
        height
      });
    }, _constants.DEBOUNCE_TIME);
  }, []);
  const value = (0, _react.useMemo)(() => ({
    width: layout.width,
    height: layout.height
  }), [layout.height, layout.width]);
  const isValidLayout = layout.width > 0 && layout.height > 0;
  return /*#__PURE__*/_react.default.createElement(LayoutContext.Provider, {
    value: value
  }, /*#__PURE__*/_react.default.createElement(_reactNativeGestureHandler.GestureHandlerRootView, {
    style: styles.flex,
    onLayout: onLayout
  }, isValidLayout ? children : null));
};
var _default = exports.default = LayoutProvider;
const useLayout = () => {
  const value = _react.default.useContext(LayoutContext);
  if (!value) {
    throw new Error('useLayout must be called from within LayoutProvider!');
  }
  return value;
};
exports.useLayout = useLayout;
const styles = _reactNative.StyleSheet.create({
  flex: {
    flex: 1,
    overflow: 'hidden'
  }
});
//# sourceMappingURL=LayoutProvider.js.map