"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useUnavailableHoursByDate = exports.useUnavailableHours = exports.default = exports.UnavailableHoursContext = void 0;
var _react = _interopRequireWildcard(require("react"));
var _useLazyRef = _interopRequireDefault(require("../hooks/useLazyRef"));
var _useSyncExternalStoreWithSelector = require("../hooks/useSyncExternalStoreWithSelector");
var _storeBuilder = require("../storeBuilder");
var _dateUtils = require("../utils/dateUtils");
var _VisibleDateProvider = require("./VisibleDateProvider");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const UnavailableHoursContext = exports.UnavailableHoursContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const UnavailableHoursProvider = ({
  children,
  unavailableHours = {},
  timeZone,
  pagesPerSide
}) => {
  const unavailableHoursStore = (0, _useLazyRef.default)(() => (0, _storeBuilder.createStore)({
    unavailableHours: {}
  })).current;
  const currentDate = (0, _VisibleDateProvider.useDateChangedListener)();
  const notifyDataChanged = (0, _react.useCallback)((date, offset = 7) => {
    let originalData = {};
    if (Array.isArray(unavailableHours)) {
      originalData = {
        '1': unavailableHours,
        '2': unavailableHours,
        '3': unavailableHours,
        '4': unavailableHours,
        '5': unavailableHours,
        '6': unavailableHours,
        '7': unavailableHours
      };
    } else {
      originalData = unavailableHours;
    }
    const data = {};
    // Iterate over the date range
    let startDateTime = (0, _dateUtils.parseDateTime)(date).minus({
      days: offset * pagesPerSide
    });
    const endDateTime = (0, _dateUtils.parseDateTime)(date).plus({
      days: offset * (pagesPerSide + 1)
    });
    while (startDateTime <= endDateTime) {
      const forceDate = (0, _dateUtils.forceUpdateZone)(startDateTime, timeZone);
      const dateUnix = forceDate.toMillis();
      const weekDay = forceDate.weekday;
      const dateStr = forceDate.toFormat('yyyy-MM-dd');

      // Get unavailable hours either by specific date or by weekday
      const unavailableHoursByDate = originalData[dateStr] || originalData[weekDay];

      // If unavailable hours are found for this day, store them
      if (unavailableHoursByDate) {
        data[dateUnix] = unavailableHoursByDate;
      }

      // Move to the next day
      startDateTime = startDateTime.plus({
        days: 1
      });
    }
    unavailableHoursStore.setState({
      unavailableHours: data
    });
  }, [unavailableHours, pagesPerSide, timeZone, unavailableHoursStore]);
  (0, _react.useEffect)(() => {
    notifyDataChanged(currentDate);
  }, [currentDate, notifyDataChanged]);
  return /*#__PURE__*/_react.default.createElement(UnavailableHoursContext.Provider, {
    value: unavailableHoursStore
  }, children);
};
var _default = exports.default = UnavailableHoursProvider;
const selector = state => state.unavailableHours || {};
const useUnavailableHours = () => {
  const unavailableHoursContext = (0, _react.useContext)(UnavailableHoursContext);
  if (!unavailableHoursContext) {
    throw new Error('useRegionsByDate must be used within a UnavailableHoursProvider');
  }
  const state = (0, _useSyncExternalStoreWithSelector.useSyncExternalStoreWithSelector)(unavailableHoursContext.subscribe, unavailableHoursContext.getState, selector);
  return state;
};
exports.useUnavailableHours = useUnavailableHours;
const useUnavailableHoursByDate = dateUnix => {
  const unavailableHoursContext = (0, _react.useContext)(UnavailableHoursContext);
  if (!unavailableHoursContext) {
    throw new Error('useRegionsByDate must be used within a UnavailableHoursProvider');
  }
  const selectUnavailableHoursByDate = (0, _react.useCallback)(state => {
    return state.unavailableHours ? state.unavailableHours[dateUnix] : undefined;
  }, [dateUnix]);
  const state = (0, _useSyncExternalStoreWithSelector.useSyncExternalStoreWithSelector)(unavailableHoursContext.subscribe, unavailableHoursContext.getState, selectUnavailableHoursByDate);
  return state;
};
exports.useUnavailableHoursByDate = useUnavailableHoursByDate;
//# sourceMappingURL=UnavailableHoursProvider.js.map