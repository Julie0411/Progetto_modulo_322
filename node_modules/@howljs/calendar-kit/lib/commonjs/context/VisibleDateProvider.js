"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useNotifyDateChanged = exports.useDateChangedListener = exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const VisibleDateValueContext = /*#__PURE__*/_react.default.createContext(undefined);
const VisibleDateActionsContext = /*#__PURE__*/_react.default.createContext(undefined);
const VisibleDateProvider = ({
  initialStart,
  children
}) => {
  const [visibleDateUnix, setVisibleDateUnix] = (0, _react.useState)(initialStart.current);
  const [debouncedDateUnix, setDebouncedDateUnix] = _react.default.useState(initialStart.current);
  (0, _react.useEffect)(() => {
    const timeoutId = setTimeout(() => {
      setDebouncedDateUnix(visibleDateUnix);
    }, 150);
    return () => clearTimeout(timeoutId);
  }, [visibleDateUnix]);
  const updateVisibleDate = (0, _react.useCallback)(date => {
    setVisibleDateUnix(date);
  }, []);
  return /*#__PURE__*/_react.default.createElement(VisibleDateActionsContext.Provider, {
    value: updateVisibleDate
  }, /*#__PURE__*/_react.default.createElement(VisibleDateValueContext.Provider, {
    value: debouncedDateUnix
  }, children));
};
var _default = exports.default = VisibleDateProvider;
const useDateChangedListener = () => {
  const context = (0, _react.useContext)(VisibleDateValueContext);
  if (!context) {
    throw new Error('useDateChangedListener must be used within a VisibleDateProvider');
  }
  return context;
};
exports.useDateChangedListener = useDateChangedListener;
const useNotifyDateChanged = () => {
  const context = (0, _react.useContext)(VisibleDateActionsContext);
  if (context === undefined) {
    throw new Error('useDateChangeActions must be used within a VisibleDateProvider');
  }
  return context;
};
exports.useNotifyDateChanged = useNotifyDateChanged;
//# sourceMappingURL=VisibleDateProvider.js.map