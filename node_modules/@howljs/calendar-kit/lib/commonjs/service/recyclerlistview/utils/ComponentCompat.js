"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentCompat = void 0;
var React = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
// Interim solve given we want to be active on old react as well for now.
class ComponentCompat extends React.Component {
  _hasRenderedOnce = false;
  shouldComponentUpdate(newProps, _newState) {
    if (this.props !== newProps) {
      this.componentWillReceivePropsCompat(newProps);
    }
    return true;
  }

  // setState inside will not update the existing cycle, not a true replacement for componentWillReceiveProps
  componentWillReceivePropsCompat(_newProps) {
    // no op
  }
  componentWillMountCompat() {
    // no op
  }
  componentWillUpdateCompat() {
    // no op
  }
  render() {
    if (!this._hasRenderedOnce) {
      this._hasRenderedOnce = true;
      this.componentWillMountCompat();
    } else {
      this.componentWillUpdateCompat();
    }
    return this.renderCompat();
  }
}
exports.ComponentCompat = ComponentCompat;
//# sourceMappingURL=ComponentCompat.js.map