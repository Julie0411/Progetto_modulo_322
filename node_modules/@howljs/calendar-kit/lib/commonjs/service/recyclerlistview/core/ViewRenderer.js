"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _ComponentCompat = require("../utils/ComponentCompat");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
/**
 * View renderer is responsible for creating a container of size provided by
 * LayoutProvider and render content inside it. Also enforces a logic to prevent
 * re renders. RecyclerListView keeps moving these ViewRendereres around using
 * transforms to enable recycling. View renderer will only update if its
 * position, dimensions or given data changes. Make sure to have a relevant
 * shouldComponentUpdate as well. This is second of the two things recycler
 * works on. Implemented both for web and react native.
 */
class ViewRenderer extends _ComponentCompat.ComponentCompat {
  isRendererMounted = true;
  shouldComponentUpdate(newProps) {
    const hasMoved = this.props.x !== newProps.x || this.props.y !== newProps.y;
    const hasSizeChanged = this.props.width !== newProps.width || this.props.height !== newProps.height || this.props.layoutProvider !== newProps.layoutProvider;
    const hasExtendedStateChanged = this.props.extendedState !== newProps.extendedState;
    const hasInternalSnapshotChanged = this.props.internalSnapshot !== newProps.internalSnapshot;
    const shouldUpdate = hasSizeChanged || hasExtendedStateChanged || hasInternalSnapshotChanged || hasMoved;
    return shouldUpdate;
  }
  componentWillMountCompat() {}
  componentWillUnmount() {
    this.isRendererMounted = false;
  }
  renderChild() {
    return this.props.childRenderer(this.props.index, this.props.extendedState);
  }
  _viewRef = null;
  renderCompat() {
    const props = {
      ref: this._setRef,
      style: {
        left: this.props.x,
        position: 'absolute',
        top: this.props.y,
        height: this.props.height,
        width: this.props.width
      }
    };
    return this._renderItemContainer(props, this.props, this.renderChild());
  }
  componentDidUpdate() {
    if (this.props.layoutProvider && this._layoutManagerRef) {
      if (this.props.layoutProvider.getLayoutManager() !== this._layoutManagerRef) {
        this._layoutManagerRef = this.props.layoutProvider.getLayoutManager();
      }
    }
  }
  componentDidMount() {
    if (this.props.layoutProvider) {
      this._layoutManagerRef = this.props.layoutProvider.getLayoutManager();
    }
  }
  getRef() {
    return this._viewRef;
  }
  _renderItemContainer(props, parentProps, children) {
    return this.props.renderItemContainer && this.props.renderItemContainer(props, parentProps, children) || /*#__PURE__*/React.createElement(_reactNative.View, props, children);
  }
  _setRef = view => {
    this._viewRef = view;
  };
}
exports.default = ViewRenderer;
//# sourceMappingURL=ViewRenderer.js.map