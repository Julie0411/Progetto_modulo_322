"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _lodash = _interopRequireDefault(require("lodash.debounce"));
var React = _interopRequireWildcard(require("react"));
var _ComponentCompat = require("../utils/ComponentCompat");
var _utils = require("../utils/utils");
var _ScrollComponent = _interopRequireDefault(require("./ScrollComponent"));
var _ViewRenderer = _interopRequireDefault(require("./ViewRenderer"));
var _VirtualRenderer = _interopRequireDefault(require("./VirtualRenderer"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
class RecyclerListView extends _ComponentCompat.ComponentCompat {
  static defaultProps = {
    initialOffset: 0,
    renderAheadOffset: 250,
    scrollEventThrottle: 16
  };
  static propTypes = {};
  refreshRequestDebouncer = (0, _lodash.default)(executable => {
    executable();
  });
  _initComplete = false;
  _isMounted = true;
  _params = {
    initialOffset: 0,
    itemCount: 0,
    renderAheadOffset: 250
  };
  _layout = {
    height: 0,
    width: 0
  };
  _pendingScrollToOffset = null;
  _initialOffset = 0;
  _scrollComponent = null;
  _isFirstRender = true;
  constructor(props, context) {
    super(props, context);
    this._virtualRenderer = new _VirtualRenderer.default(this._renderStackWhenReady, offset => {
      this._pendingScrollToOffset = offset;
    });
    const layoutSize = props.layoutProvider.getLayoutSize();
    this._layout.height = layoutSize.height;
    this._layout.width = layoutSize.width;
    this._initComplete = true;
    this._initTrackers(props);
  }
  componentWillReceivePropsCompat(newProps) {
    this._checkAndChangeLayouts(newProps);
    if (!newProps.onVisibleIndicesChanged) {
      this._virtualRenderer.removeVisibleItemsListener();
    }
    if (newProps.onVisibleIndicesChanged) {
      this._virtualRenderer.attachVisibleItemsListener(newProps.onVisibleIndicesChanged);
    }
    if (!newProps.onVisibleColumnChanged) {
      this._virtualRenderer.removeVisibleColumnsListener();
    }
    if (newProps.onVisibleColumnChanged) {
      this._virtualRenderer.attachVisibleColumnsListener(newProps.onVisibleColumnChanged);
    }
  }
  componentDidUpdate() {
    this._processInitialOffset();
  }
  componentDidMount() {
    if (this._initComplete) {
      this._processInitialOffset();
    }
  }
  componentWillUnmount() {
    this._isMounted = false;
  }
  scrollToIndex(index, animate) {
    const layoutManager = this._virtualRenderer.getLayoutManager();
    if (layoutManager) {
      const offsets = layoutManager.getOffsetForIndex(index);
      this.scrollToOffset(offsets.x, animate);
    } else {
      console.warn('scrollTo was called before RecyclerListView was measured, please wait for the mount to finish'); // tslint:disable-line
    }
  }
  getLayout(index) {
    const layoutManager = this._virtualRenderer.getLayoutManager();
    return layoutManager ? layoutManager.getLayout(index) : undefined;
  }
  scrollToTop(animate) {
    this.scrollToOffset(0, animate);
  }
  scrollToEnd(animate) {
    const lastIndex = this.props.itemCount - 1;
    this.scrollToIndex(lastIndex, animate);
  }
  scrollToOffset = (x, animate = false) => {
    if (this._scrollComponent) {
      this._scrollComponent.scrollTo(x, 0, animate);
    }
  };

  // You can use requestAnimationFrame callback to change renderAhead in multiple frames to enable advanced progressive
  // rendering when view types are very complex. This method returns a boolean saying if the update was committed. Retry in
  // the next frame if you get a failure (if mount wasn't complete). Value should be greater than or equal to 0;
  // Very useful when you have a page where you need a large renderAheadOffset. Setting it at once will slow down the load and
  // this will help mitigate that.
  updateRenderAheadOffset(renderAheadOffset) {
    const viewabilityTracker = this._virtualRenderer.getViewabilityTracker();
    if (viewabilityTracker) {
      viewabilityTracker.updateRenderAheadOffset(renderAheadOffset);
      return true;
    }
    return false;
  }
  getCurrentRenderAheadOffset() {
    const viewabilityTracker = this._virtualRenderer.getViewabilityTracker();
    if (viewabilityTracker) {
      return viewabilityTracker.getCurrentRenderAheadOffset();
    }
    return this.props.renderAheadOffset;
  }
  getCurrentScrollOffset() {
    const viewabilityTracker = this._virtualRenderer.getViewabilityTracker();
    return viewabilityTracker ? viewabilityTracker.getLastActualOffset() : 0;
  }
  getRenderedSize() {
    return this._layout;
  }
  getContentDimension() {
    return this._virtualRenderer.getLayoutDimension();
  }
  getMaxOffset(visibleColumns) {
    if (!visibleColumns || !this._params.columnsPerPage) {
      return this._virtualRenderer.getLayoutDimension().width - this._layout.width;
    }
    const columnWidth = this._layout.width / this._params.columnsPerPage;
    return this._virtualRenderer.getLayoutDimension().width - columnWidth * visibleColumns;
  }
  isScrollable(offset, visibleColumns) {
    const maxOffset = this.getMaxOffset(visibleColumns);
    const currentOffset = this.getCurrentScrollOffset();
    return offset >= 0 && offset <= maxOffset && offset !== currentOffset;
  }

  // Force Rerender forcefully to update view renderer. Use this in rare circumstances
  forceRerender() {
    this.setState({
      internalSnapshot: {}
    });
  }
  getScrollableNode() {
    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
      return this._scrollComponent.getScrollableNode();
    }
    return null;
  }
  renderCompat() {
    return /*#__PURE__*/React.createElement(_ScrollComponent.default, _extends({
      ref: scrollComponent => this._scrollComponent = scrollComponent
    }, this.props, this.props.scrollViewProps, {
      onScroll: this._onScroll,
      contentHeight: this._initComplete ? this._virtualRenderer.getLayoutDimension().height : 0,
      contentWidth: this._initComplete ? this._virtualRenderer.getLayoutDimension().width : 0,
      renderAheadOffset: this.getCurrentRenderAheadOffset()
    }), this._generateRenderStack());
  }
  getVirtualRenderer() {
    return this._virtualRenderer;
  }
  _processInitialOffset() {
    if (this._pendingScrollToOffset) {
      setTimeout(() => {
        if (this._pendingScrollToOffset) {
          const offset = this._pendingScrollToOffset;
          this._pendingScrollToOffset = null;
          offset.y = 0;
          if (this.props.initialScroll) {
            this.props.initialScroll(offset.x);
          } else {
            this.scrollToOffset(offset.x, false);
          }
          if (this._pendingRenderStack) {
            this._renderStackWhenReady(this._pendingRenderStack);
            this._pendingRenderStack = undefined;
          }
        }
      }, 0);
    }
  }
  _checkAndChangeLayouts(newProps) {
    this._params.itemCount = newProps.itemCount;
    this._params.columnsPerPage = newProps.columnsPerPage;
    this._params.extraScrollData = newProps.extraScrollData;
    this._params.initialOffset = newProps.initialOffset;
    const initialOffset = newProps.initialOffset ?? this.props.initialOffset ?? 0;
    this._virtualRenderer.setParamsAndDimensions(this._params, this._layout);
    if (this.props.layoutProvider !== newProps.layoutProvider) {
      const layoutSize = newProps.layoutProvider.getLayoutSize();
      this._layout.height = layoutSize.height;
      this._layout.width = layoutSize.width;
      this._virtualRenderer.setLayoutManager(newProps.layoutProvider.createLayoutManager());
      this._refreshViewability(initialOffset);
    } else if (this.props.itemCount !== newProps.itemCount || this.props.columnsPerPage !== newProps.columnsPerPage) {
      this._virtualRenderer.setLayoutManager(this.props.layoutProvider.createLayoutManager());
      this._refreshViewability(initialOffset);
    }
  }
  _refreshViewability(initialOffset) {
    this._virtualRenderer.refreshWithOffset(initialOffset);
    this._queueStateRefresh();
  }
  _queueStateRefresh() {
    this.refreshRequestDebouncer(() => {
      if (this._isMounted) {
        this.setState(prevState => {
          return prevState;
        });
      }
    });
  }
  _initStateIfRequired(stack) {
    if (!this.state) {
      this.state = {
        internalSnapshot: {},
        renderStack: stack
      };
      return true;
    }
    return false;
  }
  _renderStackWhenReady = stack => {
    if (this._pendingScrollToOffset) {
      this._pendingRenderStack = stack;
      return;
    }
    if (!this._initStateIfRequired(stack)) {
      this.setState(() => {
        return {
          renderStack: stack
        };
      }, () => {
        if (this._isFirstRender) {
          var _this$props$onLoad, _this$props;
          this._isFirstRender = false;
          (_this$props$onLoad = (_this$props = this.props).onLoad) === null || _this$props$onLoad === void 0 || _this$props$onLoad.call(_this$props);
        }
      });
    }
  };
  _initTrackers(props) {
    if (props.onVisibleIndicesChanged) {
      this._virtualRenderer.attachVisibleItemsListener(props.onVisibleIndicesChanged);
    }
    if (props.onVisibleColumnChanged) {
      this._virtualRenderer.attachVisibleColumnsListener(props.onVisibleColumnChanged);
    }
    this._params = {
      initialOffset: this._initialOffset ? this._initialOffset : props.initialOffset,
      itemCount: props.itemCount,
      renderAheadOffset: props.renderAheadOffset,
      columnsPerPage: props.columnsPerPage,
      extraScrollData: props.extraScrollData
    };
    this._virtualRenderer.setParamsAndDimensions(this._params, this._layout);
    const layoutManager = props.layoutProvider.createLayoutManager();
    this._virtualRenderer.setLayoutManager(layoutManager);
    this._virtualRenderer.init();
    const offset = this._virtualRenderer.getInitialOffset();
    const contentDimension = layoutManager.getContentDimension();
    if (offset.y > 0 && contentDimension.height > this._layout.height || offset.x > 0 && contentDimension.width > this._layout.width) {
      this._pendingScrollToOffset = offset;
      if (!this._initStateIfRequired()) {
        this.setState({});
      }
    } else {
      this._virtualRenderer.startViewabilityTracker();
    }
  }
  _renderRowUsingMeta(itemMeta) {
    const dataSize = this.props.itemCount;
    const dataIndex = itemMeta.dataIndex;
    if (!(0, _utils.isNullOrUndefined)(dataIndex) && dataIndex < dataSize) {
      const itemRect = this._virtualRenderer.getLayoutManager().getLayout(dataIndex);
      const key = this._virtualRenderer.syncAndGetKey(dataIndex);
      return /*#__PURE__*/React.createElement(_ViewRenderer.default, {
        key: key,
        x: itemRect.x,
        y: itemRect.y,
        index: dataIndex,
        layoutProvider: this.props.layoutProvider,
        childRenderer: this.props.rowRenderer,
        height: itemRect.height,
        width: itemRect.width,
        extendedState: this.props.extendedState,
        internalSnapshot: this.state.internalSnapshot,
        renderItemContainer: this.props.renderItemContainer
      });
    }
    return null;
  }
  _generateRenderStack() {
    const renderedItems = [];
    if (this.state) {
      for (const key in this.state.renderStack) {
        if (Object.prototype.hasOwnProperty.call(this.state.renderStack, key)) {
          renderedItems.push(this._renderRowUsingMeta(this.state.renderStack[key]));
        }
      }
    }
    return renderedItems;
  }
  _onScroll = event => {
    const contentOffset = event.nativeEvent.contentOffset;
    this._virtualRenderer.updateOffset(contentOffset.x, true);
    if (this.props.onScroll) {
      this.props.onScroll(event);
    }
  };
}
exports.default = RecyclerListView;
//# sourceMappingURL=RecyclerListView.js.map