"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _recyclerlistview = require("../../service/recyclerlistview");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const MAX_OFFSETS = 180537;
const CalendarListView = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const {
    count,
    width,
    height,
    extraData,
    renderItem,
    initialOffset = 0,
    renderAheadItem = 2,
    scrollEventThrottle = 16,
    scrollEnabled,
    animatedRef,
    onScroll,
    onVisibleIndicesChanged,
    snapToInterval,
    inverted,
    onVisibleColumnChanged,
    columnsPerPage,
    extraScrollData,
    onLoad
  } = props;
  const layoutProvider = (0, _react.useMemo)(() => new _recyclerlistview.LayoutProvider({
    width,
    height
  }), [width, height]);
  const _renderItem = (index, extendedState) => renderItem(index, extendedState);
  const _renderItemContainer = (containerProps, _parentProps, children) => {
    const style = _reactNative.StyleSheet.flatten([containerProps.style, inverted ? styles.invertedTransform : {}]);
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: style
    }, children);
  };
  const baseOffsets = (0, _react.useMemo)(() => {
    if (!snapToInterval || !width) {
      return undefined;
    }
    return Array.from({
      length: columnsPerPage
    }, (_, col) => col * snapToInterval);
  }, [columnsPerPage, snapToInterval, width]);
  const _snapToOffsets = (0, _react.useMemo)(() => {
    if (!baseOffsets) {
      return undefined;
    }
    const offsets = [];
    for (let page = 0; page < count; page++) {
      offsets.push(...baseOffsets.map(offset => offset + page * width));
    }
    if (offsets.length > MAX_OFFSETS) {
      console.warn('The number of days to display is too large');
    }
    return offsets;
  }, [baseOffsets, count, width]);
  return /*#__PURE__*/_react.default.createElement(_recyclerlistview.RecyclerListView, {
    ref: ref,
    layoutProvider: layoutProvider,
    rowRenderer: _renderItem,
    itemCount: count,
    renderItemContainer: _renderItemContainer,
    scrollViewProps: {
      pagingEnabled: !_snapToOffsets,
      snapToAlignment: !_snapToOffsets ? undefined : 'start',
      decelerationRate: !_snapToOffsets ? undefined : 'fast',
      snapToOffsets: _snapToOffsets,
      showsHorizontalScrollIndicator: false,
      scrollEnabled,
      bounces: false,
      scrollEventThrottle,
      scrollRefExternal: animatedRef,
      overScrollMode: 'never',
      onScrollExternal: onScroll,
      onMomentumScrollBegin: () => {},
      style: inverted ? styles.invertedTransform : {}
    },
    initialOffset: initialOffset,
    renderAheadOffset: width * renderAheadItem,
    scrollEventThrottle: 16,
    extendedState: extraData,
    onVisibleIndicesChanged: onVisibleIndicesChanged,
    columnsPerPage: columnsPerPage,
    onVisibleColumnChanged: onVisibleColumnChanged,
    extraScrollData: extraScrollData,
    onLoad: onLoad
  });
});
var _default = exports.default = /*#__PURE__*/_react.default.memo(CalendarListView);
const styles = _reactNative.StyleSheet.create({
  invertedTransform: {
    transform: [{
      scaleX: -1
    }]
  }
});
//# sourceMappingURL=index.js.map