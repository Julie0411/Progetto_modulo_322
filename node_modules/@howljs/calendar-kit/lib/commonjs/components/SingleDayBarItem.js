"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _constants = require("../constants");
var _ActionsProvider = require("../context/ActionsProvider");
var _DayBarContext = require("../context/DayBarContext");
var _EventsProvider = require("../context/EventsProvider");
var _LocaleProvider = require("../context/LocaleProvider");
var _ThemeProvider = require("../context/ThemeProvider");
var _DayItem = _interopRequireDefault(require("./DayItem"));
var _ExpandButton = _interopRequireDefault(require("./ExpandButton"));
var _Overlay = _interopRequireDefault(require("./Loading/Overlay"));
var _ProgressBar = _interopRequireDefault(require("./Loading/ProgressBar"));
var _Text = _interopRequireDefault(require("./Text"));
var _dateUtils = require("../utils/dateUtils");
var _TimeZoneProvider = require("../context/TimeZoneProvider");
var _Touchable = _interopRequireDefault(require("./Touchable"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const SingleDayBarItem = ({
  startUnix,
  renderExpandIcon,
  renderEvent,
  pageIndex,
  renderDayItem
}) => {
  const dayBarStyles = (0, _ThemeProvider.useTheme)((0, _react.useCallback)(state => ({
    borderColor: state.colors.border,
    singleDayContainer: state.singleDayContainer,
    singleDayEventsContainer: state.singleDayEventsContainer,
    countContainer: state.countContainer,
    countText: state.countText
  }), []));
  const {
    hourWidth,
    dayBarHeight,
    allDayEventsHeight,
    useAllDayEvent,
    isExpanded,
    isShowExpandButton,
    headerBottomHeight,
    columnWidth,
    calendarData
  } = (0, _DayBarContext.useHeader)();
  const {
    timeZone
  } = (0, _TimeZoneProvider.useTimezone)();
  const {
    data: events,
    eventCounts
  } = (0, _EventsProvider.useAllDayEventsByDay)(startUnix);
  const {
    onPressEvent,
    onPressBackground,
    onLongPressBackground
  } = (0, _ActionsProvider.useActions)();
  const _renderEvent = event => {
    return /*#__PURE__*/_react.default.createElement(EventItem, {
      key: event.localId,
      event: event,
      onPressEvent: onPressEvent,
      renderEvent: renderEvent
    });
  };
  const height = (0, _reactNativeReanimated.useDerivedValue)(() => {
    return Math.max(dayBarHeight, allDayEventsHeight.value + (isExpanded.value ? 10 : headerBottomHeight + 10));
  }, [dayBarHeight, headerBottomHeight]);
  const containerStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => ({
    height: height.value
  }));
  const eventsContainerStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => ({
    height: allDayEventsHeight.value
  }));
  const _onPressBackground = event => {
    const columnIndex = Math.floor(event.nativeEvent.locationX / columnWidth);
    const dayIndex = pageIndex + columnIndex;
    const dayUnix = calendarData.visibleDatesArray[dayIndex];
    if (dayUnix) {
      const dateObj = (0, _dateUtils.forceUpdateZone)((0, _dateUtils.parseDateTime)(dayUnix), timeZone);
      const dateString = (0, _dateUtils.dateTimeToISOString)(dateObj);
      onPressBackground === null || onPressBackground === void 0 || onPressBackground({
        date: dateString
      }, event);
    }
  };
  const _onLongPressBackground = event => {
    const columnIndex = Math.floor(event.nativeEvent.locationX / columnWidth);
    const dayIndex = pageIndex + columnIndex;
    const dayUnix = calendarData.visibleDatesArray[dayIndex];
    if (dayUnix) {
      const dateObj = (0, _dateUtils.forceUpdateZone)((0, _dateUtils.parseDateTime)(dayUnix), timeZone);
      const dateString = (0, _dateUtils.dateTimeToISOString)(dateObj);
      onLongPressBackground === null || onLongPressBackground === void 0 || onLongPressBackground({
        date: dateString
      }, event);
    }
  };
  const _renderSingleDay = () => {
    if (useAllDayEvent) {
      return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: [styles.container, dayBarStyles.singleDayContainer]
      }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: [styles.dayItemContainer, {
          width: hourWidth,
          borderRightColor: dayBarStyles.borderColor
        }]
      }, renderDayItem ? renderDayItem({
        dateUnix: startUnix
      }) : /*#__PURE__*/_react.default.createElement(_DayItem.default, {
        dateUnix: startUnix
      }), /*#__PURE__*/_react.default.createElement(_ExpandButton.default, {
        isExpanded: isExpanded,
        isShowExpandButton: isShowExpandButton,
        renderExpandIcon: renderExpandIcon
      })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
        style: styles.rightContainer
      }, /*#__PURE__*/_react.default.createElement(_Touchable.default, {
        onPress: _onPressBackground,
        onLongPress: onLongPressBackground ? _onLongPressBackground : undefined,
        disabled: !onLongPressBackground && !onPressBackground,
        style: _reactNative.StyleSheet.absoluteFill
      }), /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
        style: [dayBarStyles.singleDayEventsContainer, eventsContainerStyle]
      }, events.map(_renderEvent)), eventCounts > _constants.COLLAPSED_ITEMS && /*#__PURE__*/_react.default.createElement(EventCounts, {
        eventCounts: eventCounts,
        countContainerStyle: dayBarStyles.countContainer,
        countTextStyle: dayBarStyles.countText
      })));
    }
    return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
      style: [styles.onlyDayContainer, dayBarStyles.singleDayContainer]
    }, renderDayItem ? renderDayItem({
      dateUnix: startUnix
    }) : /*#__PURE__*/_react.default.createElement(_DayItem.default, {
      dateUnix: startUnix
    }));
  };
  return /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: containerStyle
  }, _renderSingleDay(), /*#__PURE__*/_react.default.createElement(_Overlay.default, null), /*#__PURE__*/_react.default.createElement(_ProgressBar.default, null));
};
var _default = exports.default = SingleDayBarItem;
const EventItem = ({
  event,
  onPressEvent,
  renderEvent
}) => {
  const {
    eventHeight: height,
    isExpanded,
    columnWidthAnim,
    rightEdgeSpacing,
    overlapEventsSpacing
  } = (0, _DayBarContext.useHeader)();
  const {
    _internal,
    ...rest
  } = event;
  const eventWidth = (0, _reactNativeReanimated.useDerivedValue)(() => {
    return columnWidthAnim.value - rightEdgeSpacing;
  });
  const isShow = (0, _reactNativeReanimated.useDerivedValue)(() => {
    return isExpanded.value || _internal.rowIndex < 2;
  }, [_internal.rowIndex]);
  const eventHeight = (0, _reactNativeReanimated.useDerivedValue)(() => {
    return isShow.value ? height.value - overlapEventsSpacing : 0;
  }, [overlapEventsSpacing]);
  const eventContainerStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => ({
    width: eventWidth.value,
    height: eventHeight.value,
    marginBottom: 2,
    opacity: (0, _reactNativeReanimated.withTiming)(isShow.value ? 1 : 0)
  }));
  const _onPressEvent = () => {
    if (onPressEvent) {
      onPressEvent(rest);
    }
  };
  return /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: eventContainerStyle
  }, /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    activeOpacity: 0.6,
    disabled: !onPressEvent,
    onPress: _onPressEvent,
    style: [styles.eventContent, {
      backgroundColor: rest.color ?? '#ccc'
    }, rest.containerStyle]
  }, renderEvent ? renderEvent(event, {
    width: eventWidth,
    height: eventHeight
  }) : /*#__PURE__*/_react.default.createElement(_Text.default, {
    style: [styles.eventTitle, rest.titleStyle]
  }, rest.title)));
};
const EventCounts = ({
  eventCounts,
  countContainerStyle,
  countTextStyle
}) => {
  const {
    isExpanded,
    headerBottomHeight
  } = (0, _DayBarContext.useHeader)();
  const locale = (0, _LocaleProvider.useLocale)();
  const countStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => ({
    display: isExpanded.value ? 'none' : 'flex'
  }));
  return /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: [styles.countContainer, countContainerStyle, {
      height: headerBottomHeight
    }, countStyle]
  }, /*#__PURE__*/_react.default.createElement(_Text.default, {
    style: [styles.countText, countTextStyle]
  }, locale.more.replace('{count}', `${eventCounts - _constants.COLLAPSED_ITEMS}`)), /*#__PURE__*/_react.default.createElement(_reactNative.TouchableOpacity, {
    style: _reactNative.StyleSheet.absoluteFill,
    onPress: () => {
      isExpanded.value = true;
    }
  }));
};
const styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    flexGrow: 1
  },
  dayItemContainer: {
    borderRightWidth: 1
  },
  rightContainer: {
    flexGrow: 1
  },
  eventContent: {
    width: ' 100%',
    height: '100%',
    overflow: 'hidden',
    borderRadius: 2
  },
  countContainer: {
    justifyContent: 'center',
    paddingHorizontal: 2
  },
  eventTitle: {
    fontSize: 12,
    color: '#FFF',
    paddingHorizontal: 2
  },
  countText: {
    fontSize: 12,
    paddingHorizontal: 8
  },
  dayContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    flexGrow: 1
  },
  onlyDayContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    flexGrow: 1
  }
});
//# sourceMappingURL=SingleDayBarItem.js.map