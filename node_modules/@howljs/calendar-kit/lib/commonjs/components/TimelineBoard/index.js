"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _constants = require("../../constants");
var _ActionsProvider = require("../../context/ActionsProvider");
var _BodyContext = require("../../context/BodyContext");
var _DragEventProvider = require("../../context/DragEventProvider");
var _ThemeProvider = require("../../context/ThemeProvider");
var _TimeZoneProvider = require("../../context/TimeZoneProvider");
var _dateUtils = require("../../utils/dateUtils");
var _TimeColumn = _interopRequireDefault(require("../TimeColumn"));
var _Touchable = _interopRequireDefault(require("../Touchable"));
var _HorizontalLine = _interopRequireDefault(require("./HorizontalLine"));
var _OutOfRangeView = _interopRequireDefault(require("./OutOfRangeView"));
var _UnavailableHours = _interopRequireDefault(require("./UnavailableHours"));
var _VerticalLine = _interopRequireDefault(require("./VerticalLine"));
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const TimelineBoard = ({
  pageIndex,
  dateUnix,
  visibleDates,
  resources
}) => {
  const {
    totalSlots,
    minuteHeight,
    spaceFromTop,
    hourWidth,
    start,
    columnWidthAnim,
    numberOfDays,
    calendarData,
    columns,
    timeIntervalHeight,
    renderCustomHorizontalLine
  } = (0, _BodyContext.useBody)();
  const {
    timeZone
  } = (0, _TimeZoneProvider.useTimezone)();
  const colors = (0, _ThemeProvider.useTheme)(state => state.colors);
  const {
    onPressBackground,
    onLongPressBackground
  } = (0, _ActionsProvider.useActions)();
  const {
    triggerDragCreateEvent
  } = (0, _DragEventProvider.useDragEventActions)();
  const _renderVerticalLines = () => {
    const lines = [];
    const cols = resources ? resources.length : columns;
    for (let i = 0; i < cols; i++) {
      lines.push(/*#__PURE__*/_react.default.createElement(_VerticalLine.default, {
        key: i,
        borderColor: colors.border,
        index: i,
        columnWidth: columnWidthAnim,
        childColumns: resources ? resources.length : 1
      }));
    }
    return lines;
  };
  const _renderHorizontalLines = () => {
    const rows = [];
    for (let i = 0; i < totalSlots; i++) {
      rows.push(/*#__PURE__*/_react.default.createElement(_HorizontalLine.default, {
        key: i,
        borderColor: colors.border,
        index: i,
        height: timeIntervalHeight,
        renderCustomHorizontalLine: renderCustomHorizontalLine
      }));
      rows.push(/*#__PURE__*/_react.default.createElement(_HorizontalLine.default, {
        key: `${i}.5`,
        borderColor: colors.border,
        index: i + 0.5,
        height: timeIntervalHeight,
        renderCustomHorizontalLine: renderCustomHorizontalLine
      }));
    }
    rows.push(/*#__PURE__*/_react.default.createElement(_HorizontalLine.default, {
      key: totalSlots,
      borderColor: colors.border,
      index: totalSlots,
      height: timeIntervalHeight,
      renderCustomHorizontalLine: renderCustomHorizontalLine
    }));
    return rows;
  };
  const onPress = event => {
    const columnIndex = Math.floor(event.nativeEvent.locationX / columnWidthAnim.value);
    const dayIndex = pageIndex + columnIndex;
    const dayUnix = calendarData.visibleDatesArray[dayIndex];
    const minutes = event.nativeEvent.locationY / minuteHeight.value + start;
    const hour = Math.floor(minutes / 60);
    const minute = minutes % 60;
    if (dayUnix) {
      const baseDateTime = (0, _dateUtils.parseDateTime)(dayUnix).set({
        hour,
        minute
      });
      const dateObj = (0, _dateUtils.forceUpdateZone)(baseDateTime, timeZone);
      const newProps = {
        dateTime: (0, _dateUtils.dateTimeToISOString)(dateObj)
      };
      if (resources) {
        var _resources$resourceId;
        const colWidth = columnWidthAnim.value / resources.length;
        const resourceIdx = Math.floor(event.nativeEvent.locationX / colWidth);
        newProps.resourceId = (_resources$resourceId = resources[resourceIdx]) === null || _resources$resourceId === void 0 ? void 0 : _resources$resourceId.id;
      }
      onPressBackground === null || onPressBackground === void 0 || onPressBackground(newProps, event);
    }
  };
  const onLongPress = event => {
    const columnIndex = Math.floor(event.nativeEvent.locationX / columnWidthAnim.value);
    const dayIndex = pageIndex + columnIndex;
    const dayUnix = calendarData.visibleDatesArray[dayIndex];
    const minutes = event.nativeEvent.locationY / minuteHeight.value + start;
    const hour = Math.floor(minutes / 60);
    const minute = minutes % 60;
    if (dayUnix) {
      const baseDateTime = (0, _dateUtils.parseDateTime)(dayUnix).set({
        hour,
        minute
      });
      const dateObj = (0, _dateUtils.forceUpdateZone)(baseDateTime, timeZone);
      const dateString = (0, _dateUtils.dateTimeToISOString)(dateObj);
      const newProps = {
        dateTime: dateString
      };
      if (resources) {
        var _resources$resourceId2;
        const colWidth = columnWidthAnim.value / resources.length;
        const resourceIdx = Math.floor(event.nativeEvent.locationX / colWidth);
        newProps.resourceId = (_resources$resourceId2 = resources[resourceIdx]) === null || _resources$resourceId2 === void 0 ? void 0 : _resources$resourceId2.id;
      }
      onLongPressBackground === null || onLongPressBackground === void 0 || onLongPressBackground(newProps, event);
      if (triggerDragCreateEvent) {
        triggerDragCreateEvent === null || triggerDragCreateEvent === void 0 || triggerDragCreateEvent(dateString, event);
      }
    }
  };
  const contentView = (0, _reactNativeReanimated.useAnimatedStyle)(() => ({
    height: timeIntervalHeight.value * totalSlots
  }));
  const _renderOutOfRangeView = () => {
    const diffMinDays = Math.floor((calendarData.originalMinDateUnix - dateUnix) / _constants.MILLISECONDS_IN_DAY);
    if (diffMinDays > 0) {
      return /*#__PURE__*/_react.default.createElement(_OutOfRangeView.default, {
        position: "left",
        diffDays: calendarData.diffMinDays
      });
    }
    const diffMaxDays = Math.floor((calendarData.originalMaxDateUnix - dateUnix) / _constants.MILLISECONDS_IN_DAY);
    if (diffMaxDays < 7) {
      return /*#__PURE__*/_react.default.createElement(_OutOfRangeView.default, {
        position: "right",
        diffDays: calendarData.diffMaxDays
      });
    }
    return null;
  };
  const _renderUnavailableHours = () => {
    return /*#__PURE__*/_react.default.createElement(_UnavailableHours.default, {
      visibleDates: visibleDates
    });
  };
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.container
  }, numberOfDays === 1 && !resources && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: {
      width: hourWidth
    }
  }, /*#__PURE__*/_react.default.createElement(_TimeColumn.default, null)), /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: [styles.calendarGrid, {
      marginTop: _constants.EXTRA_HEIGHT + spaceFromTop
    }, contentView]
  }, /*#__PURE__*/_react.default.createElement(_Touchable.default, {
    style: styles.touchable,
    onPress: onPressBackground ? onPress : undefined,
    onLongPress: triggerDragCreateEvent || onLongPressBackground ? onLongPress : undefined,
    disabled: !onPressBackground && !triggerDragCreateEvent && !onLongPressBackground
  }), _renderUnavailableHours(), _renderOutOfRangeView(), _renderHorizontalLines()), (numberOfDays > 1 || (resources === null || resources === void 0 ? void 0 : resources.length)) && _renderVerticalLines());
};
var _default = exports.default = /*#__PURE__*/_react.default.memo(TimelineBoard);
const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row'
  },
  calendarGrid: {
    flex: 1
  },
  separator: {
    backgroundColor: '#2D2D2D',
    borderRightWidth: 1,
    borderLeftWidth: 1,
    borderLeftColor: '#626266',
    borderRightColor: '#626266',
    position: 'absolute'
  },
  touchableContainer: {
    flex: 1,
    flexDirection: 'row'
  },
  touchable: {
    flex: 1
  }
});
//# sourceMappingURL=index.js.map