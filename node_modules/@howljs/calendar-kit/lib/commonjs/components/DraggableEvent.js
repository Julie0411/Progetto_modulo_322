"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DraggableEvent = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _constants = require("../constants");
var _BodyContext = require("../context/BodyContext");
var _DragEventProvider = require("../context/DragEventProvider");
var _ThemeProvider = require("../context/ThemeProvider");
var _dateUtils = require("../utils/dateUtils");
var _DragDot = _interopRequireDefault(require("./DragDot"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const DraggableEvent = ({
  startUnix,
  visibleDates,
  index,
  renderEvent,
  resources,
  TopEdgeComponent,
  BottomEdgeComponent,
  containerStyle
}) => {
  const theme = (0, _ThemeProvider.useTheme)((0, _react.useCallback)(state => {
    return {
      primaryColor: state.colors.primary,
      eventContainerStyle: state.eventContainerStyle,
      eventTitleStyle: state.eventTitleStyle
    };
  }, []));
  const {
    minuteHeight,
    columnWidthAnim,
    start,
    numberOfDays,
    verticalListRef,
    gridListRef
  } = (0, _BodyContext.useBody)();
  const {
    dragStartUnix,
    dragSelectedStartUnix,
    dragSelectedDuration,
    dragSelectedStartMinutes,
    selectedEvent,
    isDraggingAnim
  } = (0, _DragEventProvider.useDragEvent)();
  const {
    triggerDragSelectedEvent
  } = (0, _DragEventProvider.useDragEventActions)();
  const totalResources = resources && resources.length > 1 ? resources.length : 1;
  const eventWidth = (0, _reactNativeReanimated.useDerivedValue)(() => columnWidthAnim.value / totalResources, [totalResources]);
  const resourceIndex = (0, _react.useMemo)(() => {
    if (!resources) {
      return -1;
    }
    return resources.findIndex(resource => resource.id === (selectedEvent === null || selectedEvent === void 0 ? void 0 : selectedEvent.resourceId));
  }, [resources, selectedEvent === null || selectedEvent === void 0 ? void 0 : selectedEvent.resourceId]);
  const left = (0, _reactNativeReanimated.useDerivedValue)(() => {
    var _visibleDates$startUn;
    const diffDays = ((_visibleDates$startUn = visibleDates[startUnix]) === null || _visibleDates$startUn === void 0 ? void 0 : _visibleDates$startUn.diffDays) ?? 1;
    return (diffDays - 1) * columnWidthAnim.value;
  }, [visibleDates, startUnix]);
  const top = (0, _reactNativeReanimated.useDerivedValue)(() => {
    if (index > 0) {
      const dragSelectedStart = dragSelectedStartUnix.value + dragSelectedStartMinutes.value * _constants.MILLISECONDS_IN_MINUTE;
      const diffMinutes = (startUnix - dragSelectedStart) / _constants.MILLISECONDS_IN_MINUTE;
      return (0 - diffMinutes - start) * minuteHeight.value;
    }
    return (dragSelectedStartMinutes.value - start) * minuteHeight.value;
  }, [startUnix, start, index]);
  const eventHeight = (0, _reactNativeReanimated.useDerivedValue)(() => dragSelectedDuration.value * minuteHeight.value);
  const isDragging = (0, _reactNativeReanimated.useDerivedValue)(() => dragStartUnix.value !== -1);
  const animView = (0, _reactNativeReanimated.useAnimatedStyle)(() => {
    const startX = resourceIndex !== -1 ? resourceIndex * eventWidth.value : 0;
    return {
      top: top.value,
      height: eventHeight.value,
      width: eventWidth.value,
      left: startX + left.value,
      opacity: isDragging.value ? 0 : 1
    };
  }, [resourceIndex]);
  const gesture = _reactNativeGestureHandler.Gesture.Tap().blocksExternalGesture(verticalListRef, gridListRef).runOnJS(true).onTouchesDown(() => {
    triggerDragSelectedEvent({
      startIndex: index,
      type: 'center',
      resourceIndex
    });
  }).onTouchesUp(() => {
    isDraggingAnim.value = false;
  });
  const topEdgeGesture = _reactNativeGestureHandler.Gesture.Tap().blocksExternalGesture(verticalListRef, gridListRef).runOnJS(true).onTouchesDown(() => {
    triggerDragSelectedEvent({
      startIndex: index,
      type: 'top',
      resourceIndex
    });
  }).onTouchesUp(() => {
    isDraggingAnim.value = false;
  });
  const bottomEdgeGesture = _reactNativeGestureHandler.Gesture.Tap().blocksExternalGesture(verticalListRef, gridListRef).runOnJS(true).onTouchesDown(() => {
    triggerDragSelectedEvent({
      startIndex: index,
      type: 'bottom',
      resourceIndex
    });
  }).onTouchesUp(() => {
    isDraggingAnim.value = false;
  });
  return /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: [styles.container, animView]
  }, selectedEvent && /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_reactNative.StyleSheet.absoluteFill, theme.eventContainerStyle, styles.event, {
      backgroundColor: (selectedEvent === null || selectedEvent === void 0 ? void 0 : selectedEvent.color) ?? (_reactNative.Platform.OS === 'android' ? theme.primaryColor : 'transparent'),
      borderColor: theme.primaryColor
    }, containerStyle]
  }, renderEvent ? renderEvent(selectedEvent, {
    width: eventWidth,
    height: eventHeight
  }) : /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: [styles.eventTitle, theme.eventTitleStyle]
  }, selectedEvent.title)), /*#__PURE__*/_react.default.createElement(_reactNativeGestureHandler.GestureDetector, {
    gesture: gesture
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [_reactNative.StyleSheet.absoluteFill, {
      cursor: 'pointer'
    }]
  })), /*#__PURE__*/_react.default.createElement(_reactNativeGestureHandler.GestureDetector, {
    gesture: topEdgeGesture
  }, TopEdgeComponent || /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.dot, styles.dotLeft, numberOfDays === 1 && styles.dotLeftSingle]
  }, /*#__PURE__*/_react.default.createElement(_DragDot.default, null))), /*#__PURE__*/_react.default.createElement(_reactNativeGestureHandler.GestureDetector, {
    gesture: bottomEdgeGesture
  }, BottomEdgeComponent || /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.dot, styles.dotRight, numberOfDays === 1 && styles.dotRightSingle]
  }, /*#__PURE__*/_react.default.createElement(_DragDot.default, null))));
};
exports.DraggableEvent = DraggableEvent;
const styles = _reactNative.StyleSheet.create({
  container: {
    position: 'absolute'
  },
  dot: {
    position: 'absolute',
    borderRadius: 12,
    width: 24,
    height: 24,
    cursor: 'pointer'
  },
  event: {
    borderRadius: 4,
    overflow: 'hidden',
    borderWidth: 3
  },
  dotLeft: {
    top: -12,
    left: -12
  },
  dotRight: {
    bottom: -12,
    right: -12
  },
  eventTitle: {
    fontSize: 12,
    paddingHorizontal: 2
  },
  dotLeftSingle: {
    left: 0
  },
  dotRightSingle: {
    right: 0
  }
});
const DraggableEventWrapper = ({
  startUnix,
  visibleDates,
  renderEvent,
  renderDraggableEvent,
  resources
}) => {
  const [draggableDates, setDraggableDates] = (0, _react.useState)([]);
  const {
    dragSelectedStartUnix,
    dragSelectedDuration,
    dragSelectedStartMinutes
  } = (0, _DragEventProvider.useDragEvent)();
  const endUnix = (0, _react.useMemo)(() => {
    const lastDate = Object.values(visibleDates).pop();
    if (!lastDate) {
      return 0;
    }
    return (0, _dateUtils.parseDateTime)(lastDate.unix).plus({
      days: 1
    }).toMillis();
  }, [visibleDates]);
  const _handleDragSelectedEvent = (unix, minutes, duration) => {
    const dragStartUnix = unix + minutes * _constants.MILLISECONDS_IN_MINUTE;
    const dragEndUnix = dragStartUnix + duration * _constants.MILLISECONDS_IN_MINUTE;
    const isValidStart = dragStartUnix >= startUnix && dragStartUnix < endUnix;
    const isValidEnd = dragEndUnix > startUnix && dragEndUnix < endUnix;
    if (!isValidStart && !isValidEnd) {
      setDraggableDates([]);
      return;
    }
    const startDate = (0, _dateUtils.parseDateTime)(dragStartUnix).startOf('day');
    const endDate = (0, _dateUtils.parseDateTime)(dragEndUnix).startOf('day');
    const diffDays = endDate.diff(startDate, 'day').days;
    if (diffDays === 0) {
      setDraggableDates([unix]);
      return;
    }
    const dates = [];
    for (let i = 0; i <= diffDays; i++) {
      dates.push((0, _dateUtils.parseDateTime)(unix).plus({
        days: i
      }).toMillis());
    }
    setDraggableDates(dates);
  };
  (0, _reactNativeReanimated.useAnimatedReaction)(() => {
    return {
      dragSelectedStartUnix: dragSelectedStartUnix.value,
      dragSelectedStartMinutes: dragSelectedStartMinutes.value,
      dragSelectedDuration: dragSelectedDuration.value
    };
  }, result => {
    if (result.dragSelectedStartUnix >= 0 && result.dragSelectedStartMinutes >= 0 && result.dragSelectedDuration >= 0) {
      (0, _reactNativeReanimated.runOnJS)(_handleDragSelectedEvent)(result.dragSelectedStartUnix, result.dragSelectedStartMinutes, result.dragSelectedDuration);
    } else {
      (0, _reactNativeReanimated.runOnJS)(setDraggableDates)([]);
    }
  }, [startUnix, endUnix]);
  return draggableDates.map((date, index) => {
    if (!visibleDates[date]) {
      return null;
    }
    if (renderDraggableEvent) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, {
        key: `${date}-${index}`
      }, renderDraggableEvent({
        startUnix: date,
        visibleDates,
        index,
        renderEvent
      }));
    }
    return /*#__PURE__*/_react.default.createElement(DraggableEvent, {
      key: `${date}-${index}`,
      startUnix: date,
      visibleDates: visibleDates,
      index: index,
      renderEvent: renderEvent,
      resources: resources
    });
  });
};
var _default = exports.default = DraggableEventWrapper;
//# sourceMappingURL=DraggableEvent.js.map