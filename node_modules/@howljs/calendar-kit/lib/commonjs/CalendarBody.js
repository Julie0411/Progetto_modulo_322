"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _reactNativeGestureHandler = require("react-native-gesture-handler");
var _reactNativeReanimated = _interopRequireWildcard(require("react-native-reanimated"));
var _BodyItem = _interopRequireDefault(require("./components/BodyItem"));
var _CalendarListView = _interopRequireDefault(require("./components/CalendarListView"));
var _DraggingEvent = _interopRequireDefault(require("./components/DraggingEvent"));
var _DraggingHour = _interopRequireDefault(require("./components/DraggingHour"));
var _TimeColumn = _interopRequireDefault(require("./components/TimeColumn"));
var _constants = require("./constants");
var _ActionsProvider = require("./context/ActionsProvider");
var _BodyContext = require("./context/BodyContext");
var _CalendarProvider = require("./context/CalendarProvider");
var _EventsProvider = require("./context/EventsProvider");
var _LocaleProvider = require("./context/LocaleProvider");
var _useDragEventGesture = _interopRequireDefault(require("./hooks/useDragEventGesture"));
var _useDragToCreateGesture = _interopRequireDefault(require("./hooks/useDragToCreateGesture"));
var _usePinchToZoom = _interopRequireDefault(require("./hooks/usePinchToZoom"));
var _useSyncedList = _interopRequireDefault(require("./hooks/useSyncedList"));
var _dateUtils = require("./utils/dateUtils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const AnimatedScrollView = _reactNativeReanimated.default.createAnimatedComponent(_reactNativeGestureHandler.ScrollView);
const CalendarBody = ({
  hourFormat = 'HH:mm',
  renderHour,
  showNowIndicator = true,
  renderCustomOutOfRange,
  renderCustomUnavailableHour,
  renderEvent,
  renderDraggableEvent,
  renderDraggingEvent,
  renderDraggingHour,
  NowIndicatorComponent,
  renderCustomHorizontalLine
}) => {
  const {
    calendarLayout,
    hourWidth,
    columnWidthAnim,
    numberOfDays,
    offsetY,
    minuteHeight,
    maxTimelineHeight,
    maxTimeIntervalHeight,
    minTimeIntervalHeight,
    timeIntervalHeight,
    allowPinchToZoom,
    spaceFromTop,
    spaceFromBottom,
    timelineHeight,
    slots,
    totalSlots,
    start,
    end,
    timeInterval,
    columnWidth,
    scrollVisibleHeight,
    verticalListRef,
    visibleDateUnix,
    gridListRef,
    calendarData,
    calendarGridWidth,
    initialOffset,
    isRTL,
    columns,
    snapToInterval,
    calendarListRef,
    startOffset,
    scrollVisibleHeightAnim,
    visibleDateUnixAnim,
    pagesPerSide,
    rightEdgeSpacing,
    overlapEventsSpacing,
    allowDragToCreate,
    allowDragToEdit,
    firstDay,
    dragToCreateMode
  } = (0, _CalendarProvider.useCalendar)();
  const locale = (0, _LocaleProvider.useLocale)();
  const {
    onRefresh,
    onLoad
  } = (0, _ActionsProvider.useActions)();
  const resources = (0, _EventsProvider.useResources)();
  const {
    onScroll,
    onVisibleColumnChanged
  } = (0, _useSyncedList.default)({
    id: _constants.ScrollType.calendarGrid
  });
  const animContentStyle = (0, _reactNativeReanimated.useAnimatedStyle)(() => ({
    height: timelineHeight.value
  }));
  const {
    pinchGesture,
    pinchGestureRef
  } = (0, _usePinchToZoom.default)();
  const dragEventGesture = (0, _useDragEventGesture.default)();
  const dragToCreateGesture = (0, _useDragToCreateGesture.default)({
    mode: dragToCreateMode
  });
  const _onLayout = event => {
    scrollVisibleHeight.current = event.nativeEvent.layout.height;
    scrollVisibleHeightAnim.value = event.nativeEvent.layout.height;
  };
  const _onRefresh = (0, _react.useCallback)(() => {
    if (onRefresh) {
      const date = (0, _dateUtils.parseDateTime)(visibleDateUnix.current);
      onRefresh((0, _dateUtils.dateTimeToISOString)(date));
    }
  }, [onRefresh, visibleDateUnix]);
  const extraData = (0, _react.useMemo)(() => {
    return {
      firstDay,
      minDate: calendarData.minDateUnix,
      columns,
      visibleDatesArray: calendarData.visibleDatesArray,
      renderDraggableEvent,
      resources
    };
  }, [calendarData.minDateUnix, calendarData.visibleDatesArray, columns, renderDraggableEvent, firstDay, resources]);
  const _renderTimeSlots = (0, _react.useCallback)((index, extra) => {
    const pageIndex = index * extra.columns;
    const dateUnixByIndex = extra.visibleDatesArray[pageIndex];
    if (!dateUnixByIndex) {
      return null;
    }
    return /*#__PURE__*/_react.default.createElement(_BodyItem.default, {
      pageIndex: pageIndex,
      startUnix: dateUnixByIndex,
      renderDraggableEvent: extra.renderDraggableEvent,
      resources: extra.resources
    });
  }, []);
  const _onScroll = e => {
    offsetY.value = e.nativeEvent.contentOffset.y;
  };
  const extraScrollData = (0, _react.useMemo)(() => {
    return {
      visibleDates: calendarData.visibleDatesArray,
      visibleColumns: numberOfDays
    };
  }, [calendarData.visibleDatesArray, numberOfDays]);
  const hours = (0, _react.useMemo)(() => {
    return slots.map(slot => {
      return {
        slot,
        time: (0, _dateUtils.toHourStr)(slot, hourFormat, locale.meridiem)
      };
    });
  }, [hourFormat, locale.meridiem, slots]);
  const value = (0, _react.useMemo)(() => ({
    renderHour,
    offsetY,
    minuteHeight,
    maxTimelineHeight,
    maxTimeIntervalHeight,
    minTimeIntervalHeight,
    timeIntervalHeight,
    allowPinchToZoom,
    spaceFromTop,
    spaceFromBottom,
    timelineHeight,
    hours,
    hourFormat,
    totalSlots,
    columnWidthAnim,
    numberOfDays,
    hourWidth,
    start,
    end,
    timeInterval,
    showNowIndicator,
    columnWidth,
    calendarLayout,
    isRTL,
    columns,
    calendarData,
    renderCustomOutOfRange,
    renderCustomUnavailableHour,
    renderEvent,
    startOffset,
    rightEdgeSpacing,
    overlapEventsSpacing,
    visibleDateUnixAnim,
    NowIndicatorComponent,
    allowDragToCreate,
    allowDragToEdit,
    renderCustomHorizontalLine,
    dragToCreateMode,
    verticalListRef,
    gridListRef
  }), [renderHour, offsetY, minuteHeight, maxTimelineHeight, maxTimeIntervalHeight, minTimeIntervalHeight, timeIntervalHeight, allowPinchToZoom, spaceFromTop, spaceFromBottom, timelineHeight, hours, hourFormat, totalSlots, columnWidthAnim, numberOfDays, hourWidth, start, end, timeInterval, showNowIndicator, columnWidth, calendarLayout, isRTL, columns, calendarData, renderCustomOutOfRange, renderCustomUnavailableHour, renderEvent, startOffset, rightEdgeSpacing, overlapEventsSpacing, visibleDateUnixAnim, NowIndicatorComponent, allowDragToCreate, allowDragToEdit, renderCustomHorizontalLine, dragToCreateMode, verticalListRef, gridListRef]);
  const composedGesture = _reactNativeGestureHandler.Gesture.Race(pinchGesture, dragEventGesture, dragToCreateGesture);
  const leftSize = numberOfDays > 1 || !!resources ? hourWidth : 0;
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.container
  }, /*#__PURE__*/_react.default.createElement(_reactNativeGestureHandler.GestureDetector, {
    gesture: composedGesture
  }, /*#__PURE__*/_react.default.createElement(AnimatedScrollView, {
    ref: verticalListRef,
    scrollEventThrottle: 16,
    pinchGestureEnabled: false,
    showsVerticalScrollIndicator: false,
    onLayout: _onLayout,
    onScroll: _onScroll,
    refreshControl: onRefresh ? /*#__PURE__*/_react.default.createElement(_reactNative.RefreshControl, {
      refreshing: false,
      onRefresh: _onRefresh
    }) : undefined,
    simultaneousHandlers: pinchGestureRef
  }, /*#__PURE__*/_react.default.createElement(_BodyContext.BodyContext.Provider, {
    value: value
  }, /*#__PURE__*/_react.default.createElement(_reactNativeReanimated.default.View, {
    style: [{
      width: calendarLayout.width,
      overflow: _reactNative.Platform.select({
        web: 'hidden',
        default: 'visible'
      })
    }, animContentStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.absolute, {
      top: -_constants.EXTRA_HEIGHT,
      width: calendarLayout.width
    }]
  }, (numberOfDays > 1 || !!resources) && /*#__PURE__*/_react.default.createElement(_TimeColumn.default, null), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.absolute, {
      left: Math.max(0, leftSize - 1),
      width: calendarLayout.width - leftSize
    }]
  }, /*#__PURE__*/_react.default.createElement(_CalendarListView.default, {
    ref: calendarListRef,
    animatedRef: gridListRef,
    count: calendarData.count,
    scrollEnabled: _reactNative.Platform.OS !== 'web',
    width: calendarGridWidth,
    height: maxTimelineHeight + _constants.EXTRA_HEIGHT * 2,
    renderItem: _renderTimeSlots,
    extraData: extraData,
    inverted: isRTL,
    snapToInterval: snapToInterval,
    initialOffset: initialOffset,
    onScroll: onScroll,
    columnsPerPage: columns,
    onVisibleColumnChanged: onVisibleColumnChanged,
    renderAheadItem: pagesPerSide,
    extraScrollData: extraScrollData,
    onLoad: onLoad
  })), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    pointerEvents: "box-none",
    style: [styles.absolute, {
      top: _constants.EXTRA_HEIGHT + spaceFromTop
    }, styles.dragContainer]
  }, /*#__PURE__*/_react.default.createElement(_DraggingEvent.default, {
    renderDraggingEvent: renderDraggingEvent,
    resources: resources
  }), /*#__PURE__*/_react.default.createElement(_DraggingHour.default, {
    renderHour: renderDraggingHour
  }))))))));
};
var _default = exports.default = /*#__PURE__*/_react.default.memo(CalendarBody);
const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  absolute: {
    position: 'absolute'
  },
  dragContainer: {
    zIndex: 99999
  }
});
//# sourceMappingURL=CalendarBody.js.map