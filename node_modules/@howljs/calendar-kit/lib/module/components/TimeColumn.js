import React, { memo } from 'react';
import { StyleSheet, View } from 'react-native';
import Animated, { useAnimatedStyle } from 'react-native-reanimated';
import { EXTRA_HEIGHT, HOUR_SHORT_LINE_WIDTH } from '../constants';
import { useBody } from '../context/BodyContext';
import { useTheme } from '../context/ThemeProvider';
import Text from './Text';
const selectTimeColumnTheme = state => ({
  cellBorderColor: state.colors.border,
  hourTextColor: state.colors.onBackground,
  hourTextStyle: state.hourTextStyle,
  hourBackgroundColor: state.hourBackgroundColor || state.colors.background
});
const TimeColumn = () => {
  const {
    hours,
    maxTimelineHeight,
    spaceFromTop,
    spaceFromBottom,
    timelineHeight,
    renderHour,
    hourWidth,
    minuteHeight,
    start
  } = useBody();
  const {
    cellBorderColor,
    hourTextColor,
    hourTextStyle,
    hourBackgroundColor
  } = useTheme(selectTimeColumnTheme);
  const fontSize = (hourTextStyle === null || hourTextStyle === void 0 ? void 0 : hourTextStyle.fontSize) ?? 10;
  const style = StyleSheet.flatten([styles.hourText, {
    top: -fontSize / 2,
    color: hourTextColor
  }, hourTextStyle]);
  const _renderHour = (hour, index) => {
    let children;
    if (renderHour) {
      children = renderHour({
        hourStr: hour.time,
        minutes: hour.slot,
        style
      });
    } else {
      children = /*#__PURE__*/React.createElement(Text, {
        style: style
      }, hour.time);
    }
    return /*#__PURE__*/React.createElement(HourWrapper, {
      key: index !== undefined ? hour.slot : undefined,
      minutes: hour.slot,
      height: minuteHeight,
      cellBorderColor: cellBorderColor,
      start: start
    }, /*#__PURE__*/React.createElement(View, {
      style: [styles.absolute, styles.hour, {
        right: HOUR_SHORT_LINE_WIDTH + 8
      }]
    }, children));
  };
  const animView = useAnimatedStyle(() => ({
    height: timelineHeight.value - spaceFromTop - spaceFromBottom
  }));
  return /*#__PURE__*/React.createElement(View, {
    style: [styles.container, styles.absolute, {
      height: maxTimelineHeight + EXTRA_HEIGHT * 2,
      width: hourWidth,
      backgroundColor: hourBackgroundColor
    }]
  }, /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.absolute, {
      width: hourWidth,
      top: EXTRA_HEIGHT + spaceFromTop
    }, animView]
  }, hours.map(_renderHour)), /*#__PURE__*/React.createElement(View, {
    style: [styles.rightLine, {
      backgroundColor: cellBorderColor
    }]
  }));
};
export default /*#__PURE__*/memo(TimeColumn);
const HourWrapper = ({
  height,
  minutes,
  cellBorderColor,
  children,
  start
}) => {
  const animStyle = useAnimatedStyle(() => ({
    top: (minutes - start) * height.value,
    width: '100%'
  }));
  return /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.absolute, animStyle]
  }, children, /*#__PURE__*/React.createElement(View, {
    style: [styles.absolute, styles.shortLine, {
      backgroundColor: cellBorderColor,
      width: HOUR_SHORT_LINE_WIDTH
    }]
  }));
};
const styles = StyleSheet.create({
  container: {
    zIndex: 998
  },
  absolute: {
    position: 'absolute'
  },
  rightLine: {
    position: 'absolute',
    width: 1,
    right: 0,
    height: '100%'
  },
  hour: {
    left: 0
  },
  shortLine: {
    height: 1,
    right: 0
  },
  hourText: {
    fontSize: 10,
    textAlign: 'right',
    position: 'absolute',
    left: 0,
    right: 0
  }
});
//# sourceMappingURL=TimeColumn.js.map