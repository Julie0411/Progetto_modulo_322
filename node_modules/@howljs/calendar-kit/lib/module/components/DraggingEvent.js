import React, { useCallback } from 'react';
import { StyleSheet, Text, View } from 'react-native';
import Animated, { useAnimatedReaction, useAnimatedStyle, useDerivedValue, useSharedValue, withTiming } from 'react-native-reanimated';
import { useBody } from '../context/BodyContext';
import { useDragEvent } from '../context/DragEventProvider';
import { useTheme } from '../context/ThemeProvider';
import { clampValues, findNearestNumber } from '../utils/utils';
import DragDot from './DragDot';
export const DraggingEvent = ({
  renderEvent,
  TopEdgeComponent,
  BottomEdgeComponent,
  containerStyle,
  resources
}) => {
  const theme = useTheme(useCallback(state => {
    return {
      primaryColor: state.colors.primary,
      eventContainerStyle: state.eventContainerStyle,
      eventTitleStyle: state.eventTitleStyle
    };
  }, []));
  const {
    minuteHeight,
    columnWidthAnim,
    start,
    hourWidth,
    visibleDateUnixAnim,
    calendarData,
    columns,
    numberOfDays,
    dragToCreateMode
  } = useBody();
  const {
    dragDuration,
    dragStartMinutes,
    dragStartUnix,
    draggingEvent,
    dragX,
    selectedEvent
  } = useDragEvent();
  const isCreate = !selectedEvent;
  const isShowDot = dragToCreateMode !== 'date-time' && isCreate || !isCreate;
  const totalResources = resources && resources.length > 1 ? resources.length : 1;
  const getDayIndex = dayUnix => {
    'worklet';

    let currentIndex = calendarData.visibleDatesArray.indexOf(dayUnix);
    if (currentIndex === -1) {
      var _calendarData$visible;
      const nearestVisibleUnix = findNearestNumber(calendarData.visibleDatesArray, dayUnix);
      const nearestVisibleIndex = (_calendarData$visible = calendarData.visibleDates[nearestVisibleUnix]) === null || _calendarData$visible === void 0 ? void 0 : _calendarData$visible.index;
      if (!nearestVisibleIndex) {
        return 0;
      }
      currentIndex = nearestVisibleIndex;
    }
    let startIndex = calendarData.visibleDatesArray.indexOf(visibleDateUnixAnim.value);
    if (startIndex === -1) {
      var _calendarData$visible2;
      const nearestVisibleUnix = findNearestNumber(calendarData.visibleDatesArray, dayUnix);
      const nearestVisibleIndex = (_calendarData$visible2 = calendarData.visibleDates[nearestVisibleUnix]) === null || _calendarData$visible2 === void 0 ? void 0 : _calendarData$visible2.index;
      if (!nearestVisibleIndex) {
        return 0;
      }
      startIndex = nearestVisibleIndex;
    }
    return clampValues(currentIndex - startIndex, 0, columns - 1);
  };
  const eventWidth = useDerivedValue(() => columnWidthAnim.value / totalResources, [totalResources]);
  const resourceIndex = useDerivedValue(() => {
    if (totalResources === 1) {
      return 0;
    }
    const dragPosition = Math.floor(dragX.value - hourWidth);
    const columnIndex = Math.floor(dragPosition / eventWidth.value);
    return clampValues(columnIndex, 0, totalResources - 1);
  }, [totalResources, hourWidth]);
  const internalDayIndex = useSharedValue(getDayIndex(dragStartUnix.value));
  useAnimatedReaction(() => dragStartUnix.value, dayUnix => {
    if (dayUnix !== -1) {
      const dayIndex = getDayIndex(dayUnix);
      internalDayIndex.value = withTiming(dayIndex, {
        duration: 100
      });
    }
  });
  const eventHeight = useDerivedValue(() => {
    return dragDuration.value * minuteHeight.value;
  });
  const animView = useAnimatedStyle(() => {
    const startX = resourceIndex.value * eventWidth.value;
    return {
      top: (dragStartMinutes.value - start) * minuteHeight.value,
      height: dragDuration.value * minuteHeight.value,
      width: eventWidth.value,
      left: startX + hourWidth + eventWidth.value * internalDayIndex.value - 1
    };
  }, [totalResources, hourWidth]);
  const renderTopEdgeComponent = () => {
    if (!isShowDot) {
      return null;
    }
    if (TopEdgeComponent) {
      return TopEdgeComponent;
    }
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.dot, styles.dotLeft, numberOfDays === 1 && styles.dotLeftSingle]
    }, /*#__PURE__*/React.createElement(DragDot, null));
  };
  const renderBottomEdgeComponent = () => {
    if (!isShowDot) {
      return null;
    }
    if (BottomEdgeComponent) {
      return BottomEdgeComponent;
    }
    return /*#__PURE__*/React.createElement(View, {
      style: [styles.dot, styles.dotRight, numberOfDays === 1 && styles.dotRightSingle]
    }, /*#__PURE__*/React.createElement(DragDot, null));
  };
  return /*#__PURE__*/React.createElement(Animated.View, {
    style: [styles.container, animView]
  }, /*#__PURE__*/React.createElement(View, {
    style: [StyleSheet.absoluteFill, theme.eventContainerStyle, styles.event, {
      backgroundColor: (draggingEvent === null || draggingEvent === void 0 ? void 0 : draggingEvent.color) ?? 'transparent',
      borderColor: theme.primaryColor
    }, containerStyle]
  }, renderEvent ? renderEvent(draggingEvent, {
    width: eventWidth,
    height: eventHeight
  }) : !!(draggingEvent !== null && draggingEvent !== void 0 && draggingEvent.title) && /*#__PURE__*/React.createElement(Text, {
    style: [styles.eventTitle, theme.eventTitleStyle]
  }, draggingEvent.title)), isShowDot && renderTopEdgeComponent(), isShowDot && renderBottomEdgeComponent());
};
const DraggingEventWrapper = ({
  renderDraggingEvent,
  renderEvent,
  resources
}) => {
  const {
    isDragging
  } = useDragEvent();
  if (!isDragging) {
    return null;
  }
  if (renderDraggingEvent) {
    return renderDraggingEvent({
      renderEvent,
      resources
    });
  }
  return /*#__PURE__*/React.createElement(DraggingEvent, {
    renderEvent: renderEvent,
    resources: resources
  });
};
export default DraggingEventWrapper;
const styles = StyleSheet.create({
  container: {
    position: 'absolute'
  },
  dot: {
    position: 'absolute',
    borderRadius: 12,
    width: 24,
    height: 24
  },
  event: {
    borderWidth: 3,
    borderRadius: 4,
    overflow: 'hidden'
  },
  dotLeft: {
    top: -12,
    left: -12
  },
  dotRight: {
    bottom: -12,
    right: -12
  },
  eventTitle: {
    fontSize: 12,
    paddingHorizontal: 2
  },
  dotLeftSingle: {
    left: 0
  },
  dotRightSingle: {
    right: 0
  }
});
//# sourceMappingURL=DraggingEvent.js.map