import React, { memo, useCallback } from 'react';
import { StyleSheet, View } from 'react-native';
import Animated, { useAnimatedStyle, useDerivedValue } from 'react-native-reanimated';
import { useBody } from '../../context/BodyContext';
import { useTheme } from '../../context/ThemeProvider';
import { useUnavailableHoursByDate } from '../../context/UnavailableHoursProvider';
const UnavailableHours = ({
  visibleDates
}) => {
  const _renderColumn = (currentUnix, index) => /*#__PURE__*/React.createElement(UnavailableColumn, {
    key: `UnavailableHours_${currentUnix}`,
    currentUnix: Number(currentUnix),
    index: index
  });
  return /*#__PURE__*/React.createElement(View, {
    style: StyleSheet.absoluteFill,
    pointerEvents: "box-none"
  }, Object.keys(visibleDates).map(_renderColumn));
};
export default UnavailableHours;
const UnavailableColumn = /*#__PURE__*/memo(({
  currentUnix,
  index
}) => {
  const {
    start: calendarStart,
    renderCustomUnavailableHour
  } = useBody();
  const backgroundColor = useTheme(useCallback(state => state.unavailableHourBackgroundColor || state.colors.surface, []));
  const unavailableHours = useUnavailableHoursByDate(currentUnix);
  if (!unavailableHours) {
    return null;
  }
  const _renderSpecialRegion = (props, regionIndex) => {
    const clampedStart = Math.max(props.start - calendarStart, 0);
    const start = props.start > calendarStart ? props.start : calendarStart;
    const totalMinutes = props.end - start;
    return /*#__PURE__*/React.createElement(UnavailableHourItem, {
      key: `${currentUnix}_${regionIndex}`,
      diffDays: index,
      diffMinutes: clampedStart,
      totalMinutes: totalMinutes,
      backgroundColor: props.backgroundColor || backgroundColor,
      enableBackgroundInteraction: props.enableBackgroundInteraction,
      renderCustomUnavailableHour: renderCustomUnavailableHour,
      originalProps: props
    });
  };
  return unavailableHours.map(_renderSpecialRegion);
});
const UnavailableHourItem = ({
  totalMinutes,
  diffDays,
  diffMinutes,
  backgroundColor,
  enableBackgroundInteraction,
  renderCustomUnavailableHour,
  originalProps
}) => {
  const {
    minuteHeight,
    columnWidthAnim
  } = useBody();
  const height = useDerivedValue(() => minuteHeight.value * totalMinutes);
  const animView = useAnimatedStyle(() => {
    return {
      width: columnWidthAnim.value,
      height: height.value,
      top: minuteHeight.value * diffMinutes,
      left: columnWidthAnim.value * diffDays
    };
  });
  return /*#__PURE__*/React.createElement(Animated.View, {
    pointerEvents: enableBackgroundInteraction ? 'none' : 'auto',
    style: [styles.container, {
      backgroundColor
    }, animView]
  }, renderCustomUnavailableHour && renderCustomUnavailableHour({
    ...originalProps,
    width: columnWidthAnim,
    height
  }));
};
const styles = StyleSheet.create({
  container: {
    position: 'absolute'
  }
});
//# sourceMappingURL=UnavailableHours.js.map