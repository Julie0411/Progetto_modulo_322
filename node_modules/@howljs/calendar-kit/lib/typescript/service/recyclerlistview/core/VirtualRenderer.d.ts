import type { LayoutManager, Point } from './LayoutManager';
import type { Dimension } from './LayoutProvider';
import type { TOnColumnChanged, TOnItemStatusChanged } from './ViewabilityTracker';
import ViewabilityTracker from './ViewabilityTracker';
/**
 * Renderer which keeps track of recyclable items and the currently rendered
 * items. Notifies list view to re render if something changes, like scroll
 * offset
 */
export interface RenderStackItem {
    dataIndex?: number;
}
export interface StableIdMapItem {
    key: string;
}
export interface RenderStack {
    [key: string]: RenderStackItem;
}
export interface RenderStackParams {
    itemCount: number;
    initialOffset?: number;
    renderAheadOffset?: number;
    columnsPerPage?: number;
    extraScrollData?: Record<string, any>;
}
export type StableIdProvider = (index: number) => string;
export default class VirtualRenderer {
    private onVisibleItemsChanged;
    private onVisibleColumnChanged;
    private _scrollOnNextUpdate;
    private _stableIdToRenderKeyMap;
    private _engagedIndexes;
    private _renderStack;
    private _renderStackChanged;
    private _isViewTrackerRunning;
    private _markDirty;
    private _startKey;
    private _recyclePool;
    private _params;
    private _layoutManager;
    private _viewabilityTracker;
    private _dimensions;
    constructor(renderStackChanged: (renderStack: RenderStack) => void, scrollOnNextUpdate: (point: Point) => void);
    getLayoutDimension(): Dimension;
    updateOffset(offsetX: number, isActual: boolean): void;
    attachVisibleItemsListener(callback: TOnItemStatusChanged): void;
    removeVisibleItemsListener(): void;
    attachVisibleColumnsListener(callback: TOnColumnChanged): void;
    removeVisibleColumnsListener(): void;
    getLayoutManager(): LayoutManager | null;
    setParamsAndDimensions(params: RenderStackParams, dim: Dimension): void;
    setLayoutManager(layoutManager: LayoutManager): void;
    getViewabilityTracker(): ViewabilityTracker | null;
    refreshWithOffset(offset: number): void;
    refresh(): void;
    getInitialOffset(): Point;
    init(): void;
    startViewabilityTracker(): void;
    syncAndGetKey(index: number): string;
    private _getCollisionAvoidingKey;
    private _prepareViewabilityTracker;
    private _onVisibleItemsChanged;
    private _onVisibleColumnChanged;
    private _onEngagedItemsChanged;
    private _updateRenderStack;
}
//# sourceMappingURL=VirtualRenderer.d.ts.map