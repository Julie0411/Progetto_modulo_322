import type { Layout } from './LayoutManager';
import type { Dimension } from './LayoutProvider';
export interface Range {
    start: number;
    end: number;
}
export type TOnItemStatusChanged = (all: number[], now: number[], notNow: number[]) => void;
export type TOnColumnChanged = (props: {
    index: number;
    columns: number;
    column: number;
    offset: number;
    extraScrollData: Record<string, any>;
}) => void;
export default class ViewabilityTracker {
    onVisibleRowsChanged: TOnItemStatusChanged | null;
    onEngagedRowsChanged: TOnItemStatusChanged | null;
    onVisibleColumnChanged: TOnColumnChanged | null;
    private _currentOffset;
    private _maxOffset;
    private _renderAheadOffset;
    private _visibleWindow;
    private _engagedWindow;
    private _windowBound;
    private _visibleIndexes;
    private _engagedIndexes;
    private _startColumn;
    private _layout;
    private _actualOffset;
    private _itemCount;
    private _columnsPerPage?;
    private _extraScrollData?;
    constructor(renderAheadOffset: number, initialOffset: number, columnsPerPage?: number, extraScrollData?: Record<string, any>);
    init(): void;
    setLayout(layout: Layout, maxOffset: number, itemCount: number, columnsPerPage?: number, extraScrollData?: Record<string, any>): void;
    setDimensions(dimension: Dimension): void;
    forceRefresh(): boolean;
    forceRefreshWithOffset(offset: number): void;
    updateOffset(offset: number, isActual: boolean): void;
    getLastOffset(): number;
    getLastActualOffset(): number;
    getEngagedIndexes(): number[];
    updateRenderAheadOffset(renderAheadOffset: number): void;
    getCurrentRenderAheadOffset(): number;
    setActualOffset(actualOffset: number): void;
    private _getLayoutByIndex;
    private _fitAndUpdate;
    private _doInitialFit;
    private _fitIndexes;
    private _checkIntersectionAndReport;
    private _setRelevantBounds;
    private _isItemInBounds;
    private _isItemBoundsBeyondWindow;
    private _isZeroHeightEdgeElement;
    private _itemIntersectsWindow;
    private _itemIntersectsEngagedWindow;
    private _itemIntersectsVisibleWindow;
    private _updateTrackingWindows;
    private _diffUpdateOriginalIndexesAndRaiseEvents;
    private _updateAndNotify;
    private _calculateArrayDiff;
}
//# sourceMappingURL=ViewabilityTracker.d.ts.map