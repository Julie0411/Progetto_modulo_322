import * as React from 'react';
import type { BaseLayoutProvider } from './LayoutProvider';
import { ComponentCompat } from '../utils/ComponentCompat';
export interface ViewRendererProps<T> {
    x: number;
    y: number;
    height: number;
    width: number;
    childRenderer: (index: number, extendedState?: object) => JSX.Element | JSX.Element[] | null;
    index: number;
    extendedState?: object;
    internalSnapshot?: object;
    layoutProvider?: BaseLayoutProvider;
    renderItemContainer?: (props: object, parentProps: ViewRendererProps<T>, children?: React.ReactNode) => React.ReactNode;
}
/**
 * View renderer is responsible for creating a container of size provided by
 * LayoutProvider and render content inside it. Also enforces a logic to prevent
 * re renders. RecyclerListView keeps moving these ViewRendereres around using
 * transforms to enable recycling. View renderer will only update if its
 * position, dimensions or given data changes. Make sure to have a relevant
 * shouldComponentUpdate as well. This is second of the two things recycler
 * works on. Implemented both for web and react native.
 */
export default class ViewRenderer extends ComponentCompat<ViewRendererProps<any>, object> {
    isRendererMounted: boolean;
    shouldComponentUpdate(newProps: ViewRendererProps<any>): boolean;
    componentWillMountCompat(): void;
    componentWillUnmount(): void;
    protected renderChild(): JSX.Element | JSX.Element[] | null;
    private _viewRef;
    private _layoutManagerRef?;
    renderCompat(): JSX.Element;
    componentDidUpdate(): void;
    componentDidMount(): void;
    protected getRef(): object | null;
    private _renderItemContainer;
    private _setRef;
}
//# sourceMappingURL=ViewRenderer.d.ts.map