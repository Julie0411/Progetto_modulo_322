import type { FC } from 'react';
import React from 'react';
import type { ViewStyle } from 'react-native';
import type { SharedValue } from 'react-native-reanimated';
import type { ResourceItem, SelectedEventType } from '../types';
export interface DraggingEventProps {
    renderEvent?: (event: SelectedEventType | undefined, options: {
        width: SharedValue<number>;
        height: SharedValue<number>;
    }) => React.ReactElement | null;
    TopEdgeComponent?: React.ReactElement | null;
    BottomEdgeComponent?: React.ReactElement | null;
    containerStyle?: ViewStyle;
    resources?: ResourceItem[];
}
export declare const DraggingEvent: FC<DraggingEventProps>;
interface DraggingEventWrapperProps {
    renderEvent?: (event: SelectedEventType | undefined, options: {
        width: SharedValue<number>;
        height: SharedValue<number>;
    }) => React.ReactElement | null;
    renderDraggingEvent?: (props: {
        renderEvent?: (event: SelectedEventType | undefined, options: {
            width: SharedValue<number>;
            height: SharedValue<number>;
        }) => React.ReactElement | null;
        resources?: ResourceItem[];
    }) => React.ReactElement | null;
    resources?: ResourceItem[];
}
declare const DraggingEventWrapper: ({ renderDraggingEvent, renderEvent, resources, }: DraggingEventWrapperProps) => React.JSX.Element | null;
export default DraggingEventWrapper;
//# sourceMappingURL=DraggingEvent.d.ts.map