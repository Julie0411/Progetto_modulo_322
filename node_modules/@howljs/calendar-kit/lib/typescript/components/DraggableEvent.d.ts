import type { FC } from 'react';
import React from 'react';
import type { ViewStyle } from 'react-native';
import type { SharedValue } from 'react-native-reanimated';
import type { ResourceItem, SelectedEventType } from '../types';
export interface DraggableEventProps {
    index: number;
    startUnix: number;
    visibleDates: Record<string, {
        diffDays: number;
        unix: number;
    }>;
    renderEvent?: (event: SelectedEventType, options: {
        width: SharedValue<number>;
        height: SharedValue<number>;
    }) => React.ReactElement | null;
    TopEdgeComponent?: React.ReactElement | null;
    BottomEdgeComponent?: React.ReactElement | null;
    containerStyle?: ViewStyle;
    resources?: ResourceItem[];
}
export declare const DraggableEvent: FC<DraggableEventProps>;
interface DraggableEventWrapperProps {
    startUnix: number;
    visibleDates: Record<string, {
        diffDays: number;
        unix: number;
    }>;
    renderEvent?: (event: SelectedEventType, options: {
        width: SharedValue<number>;
        height: SharedValue<number>;
    }) => React.ReactElement | null;
    renderDraggableEvent?: (event: DraggableEventProps) => React.ReactElement | null;
    resources?: ResourceItem[];
}
declare const DraggableEventWrapper: FC<DraggableEventWrapperProps>;
export default DraggableEventWrapper;
//# sourceMappingURL=DraggableEvent.d.ts.map