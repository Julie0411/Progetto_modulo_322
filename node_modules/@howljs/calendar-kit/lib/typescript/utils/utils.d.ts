import type { WeekdayNumbers } from 'luxon';
import type { DateType } from '../types';
type CalendarRangeOptions = {
    minDate: DateType;
    maxDate: DateType;
    firstDay: WeekdayNumbers;
    isSingleDay: boolean;
    hideWeekDays?: WeekdayNumbers[];
    timeZone?: string;
};
export type DataByMode = {
    count: number;
    minDateUnix: number;
    maxDateUnix: number;
    originalMinDateUnix: number;
    originalMaxDateUnix: number;
    visibleDates: Record<string, {
        index: number;
        unix: number;
        weekday: WeekdayNumbers;
    }>;
    visibleDatesArray: number[];
    diffMinDays: number;
    diffMaxDays: number;
};
export declare const prepareCalendarRange: (props: CalendarRangeOptions) => DataByMode;
export declare const findNearestNumber: (numbers: number[], target: number) => number;
export declare const isNumbersEqual: (num1: number, num2: number, epsilon?: number) => boolean;
export declare const calculateSlots: (start: number, end: number, step: number) => number[];
export declare const clampValues: (value: number, min: number, max: number) => number;
export declare const roundMinutes: (minutes: number, step: number, type?: 'round' | 'ceil' | 'floor') => number;
type PrepareMonthDataOptions = {
    minDate: DateType;
    maxDate: DateType;
    firstDay: WeekdayNumbers;
    timeZone?: string;
};
export type MonthData = {
    count: number;
    minDateUnix: number;
    originalMinDateUnix: number;
    originalMaxDateUnix: number;
    minStartOfMonthUnix: number;
    maxStartOfMonthUnix: number;
};
export declare const prepareMonthData: (props: PrepareMonthDataOptions) => MonthData;
export {};
//# sourceMappingURL=utils.d.ts.map