import type { DateTime, WeekdayNumbers } from 'luxon';
import type { EventItem, EventItemInternal, PackedAllDayEvent, PackedEvent, ResourceItem } from '../types';
export type FilteredEvents = {
    allDays: EventItemInternal[];
    regular: EventItemInternal[];
};
export declare const filterEvents: (events: EventItem[], minUnix: number, maxUnix: number, useAllDayEvent?: boolean) => FilteredEvents;
export declare const buildInstanceId: (id: string, date: DateTime) => string;
export declare const divideEvents: (event: EventItemInternal, timeZone?: string, minRegularEventMinutes?: number) => EventItemInternal[];
export declare const divideAllDayEvents: (event: EventItemInternal, timeZone: string, firstDay: WeekdayNumbers, hideWeekDays: WeekdayNumbers[]) => EventItemInternal[];
export declare function processEventOccurrences(event: EventItemInternal, minUnix: number, maxUnix: number, timeZone: string, divideFunction: (event: EventItemInternal, timeZone: string) => EventItemInternal[]): EventItemInternal[];
export declare function processAllDayEventMap(allDayEventMap: Map<number, EventItemInternal[]>, timeZone: string, hideWeekDays: WeekdayNumbers[]): {
    packedAllDayEvents: Record<string, PackedAllDayEvent[]>;
    packedAllDayEventsByDay: Record<string, PackedAllDayEvent[]>;
    eventCountsByWeek: Record<string, number>;
    eventCountsByDay: Record<string, number>;
};
export declare function getVisibleDays(weekStart: number, timeZone: string, hideWeekDays: WeekdayNumbers[]): number[];
export declare const sortEvents: (events: EventItemInternal[]) => EventItemInternal[];
export declare const populateEvents: (events: EventItemInternal[], { overlap, minStartDifference, resources, }?: {
    overlap?: boolean | undefined;
    minStartDifference?: number | undefined;
    resources?: ResourceItem[] | undefined;
}) => PackedEvent[];
interface PopulateAllDayOptions {
    startDate: number;
    endDate: number;
    timeZone: string;
    visibleDays: number[];
}
interface PopulateAllDayResult {
    packedEvents: PackedAllDayEvent[];
    maxRowCount: number;
}
export declare const populateAllDayEvents: (events: EventItemInternal[], options: PopulateAllDayOptions) => PopulateAllDayResult;
export {};
//# sourceMappingURL=eventUtils.d.ts.map