import type { WeekdayNumbers } from 'luxon';
import React from 'react';
import type { EventItem, PackedAllDayEvent, PackedEvent, ResourceItem } from '../types';
interface EventsProviderProps {
    firstDay: WeekdayNumbers;
    events?: EventItem[];
    timeZone: string;
    useAllDayEvent?: boolean;
    pagesPerSide: number;
    hideWeekDays: WeekdayNumbers[];
    defaultOffset?: number;
    minRegularEventMinutes?: number;
    overlapType?: 'no-overlap' | 'overlap';
    minStartDifference?: number;
    resources?: ResourceItem[];
}
export interface EventsRef {
    getEventsByDate: (date: string) => PackedEvent[];
}
declare const _default: React.ForwardRefExoticComponent<EventsProviderProps & {
    children?: React.ReactNode;
} & React.RefAttributes<EventsRef>>;
export default _default;
export declare const useAllDayEvents: (date: number, numberOfDays: number, visibleDays: Record<number, {
    unix: number;
}>) => {
    data: PackedAllDayEvent[];
    eventCounts: Record<string, number>;
};
export declare const useAllDayEventsByDay: (date: number) => {
    data: PackedAllDayEvent[];
    eventCounts: number;
};
export declare const useRegularEvents: (date: number, numberOfDays: number, visibleDays: Record<string, {
    diffDays: number;
    unix: number;
}>) => {
    data: PackedEvent[];
};
export declare const useEventCountsByWeek: (type: 'week' | 'day') => Record<string, number>;
export declare const useResources: () => ResourceItem[] | undefined;
export declare const useMonthEvents: (date: number, numberOfDays: number, visibleDays: number[]) => {
    data: Record<string, PackedEvent[]>;
};
//# sourceMappingURL=EventsProvider.d.ts.map