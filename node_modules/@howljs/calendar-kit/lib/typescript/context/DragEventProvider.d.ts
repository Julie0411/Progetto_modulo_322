import type { FC, PropsWithChildren } from 'react';
import { type GestureResponderEvent } from 'react-native';
import type { SharedValue } from 'react-native-reanimated';
import type HapticService from '../service/HapticService';
import type { DateTimeType, DateType, OnEventResponse, ResourceItem, SelectedEventType } from '../types';
export type DragEventContextProps = {
    dragStep: number;
    allowDragToEdit: boolean;
    draggingEvent?: SelectedEventType;
    dragStartMinutes: SharedValue<number>;
    dragDuration: SharedValue<number>;
    isDraggingAnim: SharedValue<boolean>;
    draggingId: string | undefined;
    selectedEvent?: SelectedEventType;
    dragPosition: SharedValue<{
        x: number;
        y: number;
        translationX: number;
        translationY: number;
    }>;
    dragStartUnix: SharedValue<number>;
    roundedDragStartMinutes: SharedValue<number>;
    roundedDragDuration: SharedValue<number>;
    dragSelectedType: SharedValue<'center' | 'top' | 'bottom' | undefined>;
    roundedDragStartUnix: SharedValue<number>;
    dragSelectedStartUnix: SharedValue<number>;
    dragSelectedStartMinutes: SharedValue<number>;
    dragSelectedDuration: SharedValue<number>;
    isDraggingSelectedEvent: SharedValue<boolean>;
    extraMinutes: SharedValue<number>;
    selectedEventId: string | undefined;
    initialDragState: SharedValue<{
        dragStart: number;
        dragStartUnix: number;
        dragDuration: number;
    }>;
    allowDragToCreate: boolean;
    defaultDuration: number;
    isDraggingCreateAnim: SharedValue<boolean>;
    isDragging: boolean;
    dragX: SharedValue<number>;
};
export type DragEventActionsContextProps = {
    triggerDragEvent?: (initialDrag: {
        start: DateTimeType;
        end: DateTimeType;
        startIndex?: number;
        dragX?: number;
    }, event?: OnEventResponse) => void;
    triggerDragSelectedEvent: (initialDrag: {
        startIndex: number;
        type: 'center' | 'top' | 'bottom';
        resourceIndex?: number;
    }) => void;
    triggerDragCreateEvent?: (date: DateType, event: GestureResponderEvent) => void;
};
declare const DragEventProvider: FC<PropsWithChildren<{
    dragStep: number;
    allowDragToEdit: boolean;
    selectedEvent?: SelectedEventType;
    allowDragToCreate: boolean;
    defaultDuration: number;
    hapticService: HapticService;
    resources?: ResourceItem[];
}>>;
export default DragEventProvider;
export declare const useDragEvent: () => DragEventContextProps;
export declare const useDragEventActions: () => DragEventActionsContextProps;
//# sourceMappingURL=DragEventProvider.d.ts.map